{"ts":1363140504769,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/* PHPInSimMod\n*\n* by the PHPInSimMod Development Team.\n*\n*/\n\n/* Defines */\n// PRISM\ndefine('PRISM_DEBUG_CORE',\t\t1);\t\t\t# Shows Debug Messages From the Core\ndefine('PRISM_DEBUG_SOCKETS',\t2);\t\t\t# Shows Debug Messages From the Sockets Module\ndefine('PRISM_DEBUG_MODULES',\t4);\t\t\t# Shows Debug Messages From the all Modules\ndefine('PRISM_DEBUG_PLUGINS',\t8);\t\t\t# Shows Debug Messages From the Plugins\ndefine('PRISM_DEBUG_ALL',\t\t15);\t\t# Shows Debug Messages From All\n\ndefine('MAINTENANCE_INTERVAL', \t2);\t\t\t# The frequency in seconds to do connection maintenance checks.\n\n// Return Codes: \ndefine('PLUGIN_CONTINUE',\t\t0);\t\t\t# Plugin passes through operation. Whatever called it continues.\ndefine('PLUGIN_HANDLED',\t\t1);\t\t\t# Plugin halts continued operation. Plugins following in the plugins.ini won't be called.\ndefine('PLUGIN_STOP',\t\t\t2);\t\t\t# Plugin stops timer from triggering again in the future.\n\nerror_reporting(E_ALL);\nini_set('display_errors',\t\t'TRUE');\n\ndefine('ROOTPATH', dirname(realpath(__FILE__)));\n\n// the REQUIRED modules for PRISM.\nrequire_once(ROOTPATH . '/modules/prism_functions.php');\nrequire_once(ROOTPATH . '/modules/prism_config.php');\nrequire_once(ROOTPATH . '/modules/prism_packets.php');\nrequire_once(ROOTPATH . '/modules/prism_hosts.php');\nrequire_once(ROOTPATH . '/modules/prism_statehandler.php');\nrequire_once(ROOTPATH . '/modules/prism_http.php');\nrequire_once(ROOTPATH . '/modules/prism_telnet.php');\nrequire_once(ROOTPATH . '/modules/prism_admins.php');\nrequire_once(ROOTPATH . '/modules/prism_timers.php');\nrequire_once(ROOTPATH . '/modules/prism_plugins.php');\n\n\n$PRISM = new PHPInSimMod();\n$PRISM->initialise($argc, $argv);\n$PRISM->start();\n\n/**\n * PHPInSimMod\n * @package PRISM\n * @author Dygear (Mark Tomlin) <Dygear@gmail.com>\n * @author ripnet (Tom Young) <ripnet@gmail.com>\n * @author morpha (Constantin KÃ¶pplinger) <morpha@xigmo.net>\n * @author Victor (Victor van Vlaardingen) <vic@lfs.net>\n * @author GeForz (Kai Lochbaum)\n*/\nclass PHPInSimMod\n{\n\tconst VERSION = '0.4.4';\n\tconst ROOTPATH = ROOTPATH;\n\n\t/* Run Time Arrays */\n\tpublic $config\t\t\t\t= NULL;\n\tpublic $hosts\t\t\t\t= NULL;\n\tpublic $http\t\t\t\t= NULL;\n\tpublic $telnet\t\t\t\t= NULL;\n\tpublic $plugins\t\t\t\t= NULL;\n\tpublic $admins\t\t\t\t= NULL;\n\n\t# Time outs\n\tprivate $sleep\t\t\t\t= NULL;\n\tprivate $uSleep\t\t\t\t= NULL;\n\t\n\tprivate $nextMaintenance\t= 0;\n\tpublic $isWindows\t\t\t= FALSE;\n\n\t// Main while loop will run as long as this is set to TRUE.\n\tprivate $isRunning\t\t\t= FALSE;\n\n\t// Real Magic Functions\n\tpublic function __construct()\n\t{\n\t\t// This reregisters our autoload magic function into the class.\n\t\tspl_autoload_register(__CLASS__ . '::_autoload');\n\t\tset_error_handler(__CLASS__ . '::_errorHandler', E_ALL | E_STRICT);\n\t\t\n\t\t// Windows OS check\n\t\tif (preg_match('/^win/i', PHP_OS))\n\t\t\t$this->isWindows = TRUE;\n\t\t\n\t\t$this->config\t= new ConfigHandler();\n\t\t$this->hosts\t= new HostHandler();\n\t\t$this->plugins\t= new PluginHandler();\n\t\t$this->http\t\t= new HttpHandler();\n\t\t$this->telnet\t= new TelnetHandler();\n\t\t$this->admins\t= new AdminHandler();\n\t}\n\n\t// Pseudo Magic Functions\n\tprivate static function _autoload($className)\n\t{\n\t\trequire_once(ROOTPATH . \"/modules/prism_\" . strtolower($className) . \".php\");\n\t}\n\n\tpublic static function _errorHandler($errno, $errstr, $errfile, $errline, $errcontext)\n\t{\n\t\t# This error code is not included in error_reporting\n\t\tif (!(error_reporting() & $errno))\n\t\t\treturn;\n\n\t\tswitch ($errno)\n\t\t{\n\t\t\tcase E_ERROR:\n\t\t\tcase E_USER_ERROR:\n\t\t\t\t\techo 'PHP ERROR:'.PHP_EOL;\n\t\t\t\t\t$andExit = TRUE;\n\t\t\t\tbreak;\n\t\t\tcase E_WARNING:\n\t\t\tcase E_USER_WARNING:\n\t\t\t\t\techo 'PHP WARNING:'.PHP_EOL;\n\t\t\t\tbreak;\n\t\t\tcase E_NOTICE:\n\t\t\tcase E_USER_NOTICE:\n\t\t\t\t\techo 'PHP NOTICE:'.PHP_EOL;\n\t\t\t\tbreak;\n\t\t\tcase E_STRICT:\n\t\t\t\t\techo 'PHP STRICT:'.PHP_EOL;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t\techo 'UNKNOWN:'.PHP_EOL;\n\t\t\t\tbreak;\n\t\t}\n\n\t\techo \"\\t$errstr in $errfile on line $errline\".PHP_EOL;\n\n\t\t$trace = debug_backtrace();\n\t\tforeach ($trace as $index => $call)\n\t\t{\n\t\t\tif ($call['function'] == 'main') break;\n\t\t\tif ($index > 0 AND isset($call['file']) AND isset($call['line']))\n\t\t\t{\n\t\t\t\tconsole(\"\\t\".$index.' :: '.$call['function'].' in '.$call['file'].':'.$call['line']);\n\t\t\t}\n\t\t}\n\n\t\tif (isset($andExit) AND $andExit == TRUE)\n\t\t\texit(1);\n\n\t\t# Don't execute PHP internal error handler\n\t\treturn TRUE;\n\t}\n\n\tpublic function initialise($argc, $argv)\n\t{\n\t\t// Set the timezone\n\t\tif (isset($this->config->cvars['defaultTimeZone']))\n\t\t\tdate_default_timezone_set($this->config->cvars['defaultTimeZone']);\n\t\telse\n\t\t{\n\t\t\t# I know, I'm using error suppression, but I swear it's appropriate!\n\t\t\t$timeZoneGuess = @date_default_timezone_get();\n\t\t\tdate_default_timezone_set($timeZoneGuess);\n\t\t\tunset($timeZoneGuess);\n\t\t}\n\t\t\n\t\t// Initialise handlers (load config files)\n\t\tif (!$this->config->initialise() OR \n\t\t\t!$this->hosts->initialise() OR \n\t\t\t!$this->http->initialise() OR \n\t\t\t!$this->telnet->initialise() OR \n\t\t\t!$this->admins->initialise() OR \n\t\t\t!$this->plugins->initialise())\n\t\t{\n\t\t\tconsole('Fatal error encountered. Exiting...');\n\t\t\texit(1);\n\t\t}\n\t\t\n\t\t$pluginsLoaded = $this->plugins->loadPlugins();\n\t\t\n\t\tif ($this->config->cvars['debugMode'] & PRISM_DEBUG_CORE)\n\t\t{\n\t\t\tif ($pluginsLoaded == 0)\n\t\t\t\tconsole('No Plugins Loaded');\n\t\t\telse if ($pluginsLoaded == 1)\n\t\t\t\tconsole('One Plugin Loaded');\n\t\t\telse\n\t\t\t\tconsole(\"{$pluginsLoaded} Plugins Loaded.\");\n\t\t}\n\t}\n\t\t\n\tpublic function start()\n\t{\n\t\tif ($this->isRunning)\n\t\t\treturn;\n\n\t\t$this->isRunning = TRUE;\n\t\t$this->nextMaintenance = time () + MAINTENANCE_INTERVAL;\n\n\t\t$this->main();\n\t}\n\n\tprivate function main()\n\t{\n\t\twhile ($this->isRunning === TRUE)\n\t\t{\n\t\t\t// Setup our listen arrays\n\t\t\t$sockReads = $sockWrites = $socketExcept = array();\n\t\t\t\n\t\t\tif (!$this->isWindows)\n\t\t\t\t$sockReads[] = STDIN;\n\t\t\t\n\t\t\t// Add host sockets to the arrays as needed\n\t\t\t// While at it, check if we need to connect to any of the hosts.\n\t\t\t$this->hosts->getSelectableSockets($sockReads, $sockWrites);\n\n\t\t\t// Add http sockets to the arrays as needed\n\t\t\t$this->http->getSelectableSockets($sockReads, $sockWrites);\n\t\t\t\n\t\t\t// Add telnet sockets to the arrays as needed\n\t\t\t$this->telnet->getSelectableSockets($sockReads, $sockWrites);\n\t\t\t\n\t\t\t// Update timeout if there are timers waiting to be fired.\n\t\t\t$this->updateSelectTimeOut($this->sleep, $this->uSleep);\n\n\t\t\t# Error suppression used because this function returns a \"Invalid CRT parameters detected\" only on Windows.\n\t\t\t$numReady = @stream_select($sockReads, $sockWrites, $socketExcept, $this->sleep, $this->uSleep);\n\t\t\t\n\t\t\t// Keep looping until you've handled all activities on the sockets.\n\t\t\twhile($numReady > 0)\n\t\t\t{\n\t\t\t\t$numReady -= $this->hosts->checkTraffic($sockReads, $sockWrites);\n\t\t\t\t$numReady -= $this->http->checkTraffic($sockReads, $sockWrites);\n\t\t\t\t$numReady -= $this->telnet->checkTraffic($sockReads, $sockWrites);\n\t\t\t\t\n\t\t\t\t// KB input\n\t\t\t\tif (in_array (STDIN, $sockReads))\n\t\t\t\t{\n\t\t\t\t\t$numReady--;\n\t\t\t\t\t$kbInput = trim(fread (STDIN, STREAM_READ_BYTES));\n\t\t\t\t\t\n\t\t\t\t\t// Split up the input\n\t\t\t\t\t$exp = explode (' ', $kbInput);\n\t\n\t\t\t\t\t// Process the command (the first char or word of the line)\n\t\t\t\t\tswitch ($exp[0])\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tconsole(sprintf('%32s - %64s', 'COMMAND', 'DESCRIPTOIN'));\n\t\t\t\t\t\t\tforeach ($this->plugins->getPlugins() as $plugin => $details)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach ($details->sayCommands as $command => $detail)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconsole(sprintf('%32s - %64s', $command, $detail['info']));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'h':\n\t\t\t\t\t\t\tconsole(sprintf('%14s %28s:%-5s %8s %22s', 'Host ID', 'IP', 'PORT', 'UDPPORT', 'STATUS'));\n\t\t\t\t\t\t\tforeach ($this->hosts->getHostsInfo() as $host)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$status = (($host['connStatus'] == CONN_CONNECTED) ? '' : (($host['connStatus'] == CONN_VERIFIED) ? 'VERIFIED &' : ' NOT')).' CONNECTED';\n\t\t\t\t\t\t\t\t$socketType = (($host['socketType'] == SOCKTYPE_TCP) ? 'tcp://' : 'udp://');\n\t\t\t\t\t\t\t\tconsole(sprintf('%14s %28s:%-5s %8s %22s', $host['id'], $socketType.$host['ip'], $host['port'], $host['udpPort'], $status));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase 'I':\n\t\t\t\t\t\t\tconsole('RE-INITIALISING PRISM...');\n\t\t\t\t\t\t\t$this->initialise(NULL, NULL);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase 'p':\n\t\t\t\t\t\t\tconsole(sprintf('%28s %8s %24s %64s', 'NAME', 'VERSION', 'AUTHOR', 'DESCRIPTION'));\n\t\t\t\t\t\t\tforeach ($this->plugins->getPlugins() as $plugin => $details)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconsole(sprintf(\"%28s %8s %24s %64s\", $plugin::NAME, $plugin::VERSION, $plugin::AUTHOR, $plugin::DESCRIPTION));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase 'x':\n\t\t\t\t\t\t\t$this->isRunning = FALSE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase 'w':\n\t\t\t\t\t\t\tconsole(sprintf('%15s:%5s %5s', 'IP', 'PORT', 'LAST ACTIVITY'));\n\t\t\t\t\t\t\tforeach ($this->http->getHttpInfo() as $v)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$lastAct = time() - $v['lastActivity'];\n\t\t\t\t\t\t\t\tconsole(sprintf('%15s:%5s %13d', $v['ip'], $v['port'], $lastAct));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconsole('Counted '.$this->http->getHttpNumClients().' http client'.(($this->http->getHttpNumClients() == 1) ? '' : 's'));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdefault :\n\t\t\t\t\t\t\tconsole('Available Commands:');\n\t\t\t\t\t\t\tconsole('\th - show host info');\n\t\t\t\t\t\t\tconsole('\tI - re-initialise PRISM (reload ini files / reconnect to hosts / reset http socket');\n\t\t\t\t\t\t\tconsole('\tp - show plugin info');\n\t\t\t\t\t\t\tconsole('\tx - exit PHPInSimMod');\n\t\t\t\t\t\t\tconsole('\tw - show www connections');\n\t\t\t\t\t\t\tconsole('\tc - show command list');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} // End while(numReady)\n\t\t\t\n\t\t\t// No need to do the maintenance check every turn\n\t\t\tif ($this->nextMaintenance > time ())\n\t\t\t\tcontinue;\n\t\t\t$this->nextMaintenance = time () + MAINTENANCE_INTERVAL;\n\t\t\tif (!$this->hosts->maintenance())\n\t\t\t\t$this->isRunning = FALSE;\n\t\t\t$this->http->maintenance();\n\t\t\tPHPParser::cleanSessions();\n\t\t\t\t\t\t\n\t\t} // End while(isRunning)\n\t}\n\n\tprivate function updateSelectTimeOut(&$sleep, &$uSleep)\n\t{\n\t\t$sleep = 1;\n\t\t$uSleep = NULL;\n\n\t\t$sleepTime = NULL;\n\t\tforeach ($this->plugins->getPlugins() as $plugin => $object)\n\t\t{\n\t\t\t$timeout = $object->executeTimers();\n\n\t\t\tif ($timeout < $sleepTime)\n\t\t\t\t$sleepTime = $timeout;\n\t\t}\n\n\t\t# If there are no timers set or the next timeout is more then a second away, set the Sleep to 1 & uSleep to NULL.\n\t\tif ($sleepTime == NULL || $timeout < $sleepTime)\n\t\t{\n\t\t\t$sleepTime = $timeout;\n\t\t}\n\t\telse\n\t\t{\t# Set the timeout to the delta of now as compared to the next timer.\n\t\t\tlist($sleep, $uSleep) = explode('.', sprintf('%1.6f', $timeNow - $sleepTime));\n\t\t\tif (($sleep >= 1 && $uSleep >= 1) || $uSleep >= 1000000)\n\t\t\t{\n\t\t\t\t$sleep = 1;\n\t\t\t\t$uSleep = NULL;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function __destruct()\n\t{\n\t\tconsole('Safe shutdown: ' . date($this->config->cvars['logFormat']));\n\t}\n}\n\n?>"]],"start1":0,"start2":0,"length1":0,"length2":10550}]],"length":10550}
{"contributors":["jay.m.looney@gmail.com"],"silentsave":true,"ts":1363140567943,"patch":[[{"diffs":[[0,"/ PRISM\n"],[1,"\n"],[0,"define('"]],"start1":83,"start2":83,"length1":16,"length2":17}]],"length":10551,"saved":false}
{"ts":1363140570552,"patch":[[{"diffs":[[0,"/ PRISM\n"],[1,"namesp"],[0,"\ndefine("]],"start1":83,"start2":83,"length1":16,"length2":22}]],"length":10557,"saved":false}
{"ts":1363140572045,"patch":[[{"diffs":[[0,"M\nnamesp"],[1,"ace "],[0,"\ndefine("]],"start1":89,"start2":89,"length1":16,"length2":20}]],"length":10561,"saved":false}
{"ts":1363140575621,"patch":[[{"diffs":[[0,"mespace "],[1,"PRISM;"],[0,"\ndefine("]],"start1":93,"start2":93,"length1":16,"length2":22}]],"length":10567,"saved":false}
{"ts":1363140577405,"patch":[[{"diffs":[[0," PRISM;\n"],[1,"\n"],[0,"define('"]],"start1":100,"start2":100,"length1":16,"length2":17}]],"length":10568,"saved":false}
{"contributors":[],"silentsave":true,"ts":1363179478430,"patch":[[{"diffs":[[0,"er();\n\t}"],[1,"\n    \n    "],[0,"\n\n\t// Ps"]],"start1":3028,"start2":3028,"length1":16,"length2":26}]],"length":10578,"saved":false}
{"ts":1363179479307,"patch":[[{"diffs":[[0,"   \n    "],[1,"pr"],[0,"\n\n\t// Ps"]],"start1":3038,"start2":3038,"length1":16,"length2":18}]],"length":10580,"saved":false}
{"ts":1363179481145,"patch":[[{"diffs":[[0," \n    pr"],[1,"ivate st"],[0,"\n\n\t// Ps"]],"start1":3040,"start2":3040,"length1":16,"length2":24}]],"length":10588,"saved":false}
{"ts":1363179484181,"patch":[[{"diffs":[[0,"ivate st"],[1,"atic function "],[0,"\n\n\t// Ps"]],"start1":3048,"start2":3048,"length1":16,"length2":30}]],"length":10602,"saved":false}
{"ts":1363179486041,"patch":[[{"diffs":[[0,"unction "],[1,"Aut"],[0,"\n\n\t// Ps"]],"start1":3062,"start2":3062,"length1":16,"length2":19}]],"length":10605,"saved":false}
{"ts":1363179487231,"patch":[[{"diffs":[[0,"ion "],[-1,"Aut"],[0,"\n\n\t/"]],"start1":3066,"start2":3066,"length1":11,"length2":8}]],"length":10602,"saved":false}
{"ts":1363179490270,"patch":[[{"diffs":[[0,"unction "],[1,"autoL"],[0,"\n\n\t// Ps"]],"start1":3062,"start2":3062,"length1":16,"length2":21}]],"length":10607,"saved":false}
{"ts":1363179491331,"patch":[[{"diffs":[[0,"ion auto"],[-1,"L"],[0,"\n\n\t// Ps"]],"start1":3066,"start2":3066,"length1":17,"length2":16}]],"length":10606,"saved":false}
{"ts":1363179492590,"patch":[[{"diffs":[[0,"ion auto"],[1,"load"],[0,"\n\n\t// Ps"]],"start1":3066,"start2":3066,"length1":16,"length2":20}]],"length":10610,"saved":false}
{"ts":1363179494861,"patch":[[{"diffs":[[0,"autoload"],[1,"Modules()\n    "],[0,"\n\n\t// Ps"]],"start1":3070,"start2":3070,"length1":16,"length2":30}]],"length":10624,"saved":false}
{"ts":1363179496710,"patch":[[{"diffs":[[0,"s()\n    "],[1,"{"],[0,"\n\n\t// Ps"]],"start1":3084,"start2":3084,"length1":16,"length2":17}]],"length":10625,"saved":false}
{"ts":1363179498613,"patch":[[{"diffs":[[0,"()\n    {"],[1,"\n    }\n    }"],[0,"\n\n\t// Ps"]],"start1":3085,"start2":3085,"length1":16,"length2":28}]],"length":10637,"saved":false}
{"ts":1363179499659,"patch":[[{"diffs":[[0,"  {\n    "],[-1,"}"],[1,"    "],[0,"\n    }\n\n"]],"start1":3090,"start2":3090,"length1":17,"length2":20}]],"length":10640,"saved":false}
{"ts":1363179501827,"patch":[[{"diffs":[[0,"  {\n        "],[1,"//"],[0,"\n    }\n\n\t// "]],"start1":3090,"start2":3090,"length1":24,"length2":26}]],"length":10642,"saved":false}
{"ts":1363179503409,"patch":[[{"diffs":[[0,"      //"],[1,"SPL "],[0,"\n    }\n\n"]],"start1":3096,"start2":3096,"length1":16,"length2":20}]],"length":10646,"saved":false}
{"ts":1363179505095,"patch":[[{"diffs":[[0,"  //SPL "],[1,"Auto"],[0,"\n    }\n\n"]],"start1":3100,"start2":3100,"length1":16,"length2":20}]],"length":10650,"saved":false}
{"ts":1363179507968,"patch":[[{"diffs":[[0,"SPL Auto"],[1,"load Re"],[0,"\n    }\n\n"]],"start1":3104,"start2":3104,"length1":16,"length2":23}]],"length":10657,"saved":false}
{"ts":1363179509463,"patch":[[{"diffs":[[0,"oload Re"],[1,"gister"],[0,"\n    }\n\n"]],"start1":3111,"start2":3111,"length1":16,"length2":22}]],"length":10663,"saved":false}
{"ts":1363179563576,"patch":[[{"diffs":[[0,"adModule"],[-1,"s"],[0,"()\n    {"]],"start1":3076,"start2":3076,"length1":17,"length2":16}]],"length":10662,"saved":false}
{"ts":1363179729288,"patch":[[{"diffs":[[0,"dule"],[1,"s"],[0,"()"],[-1,"\n    {\n        //SPL Autoload Register\n    }"],[0,"\n\n\t/"]],"start1":3080,"start2":3080,"length1":54,"length2":11}]],"length":10619,"saved":false}
{"ts":1363179737535,"patch":[[{"diffs":[[0," sta"],[-1,"tic function autoloadModules()"],[0,"\n\n\t/"]],"start1":3053,"start2":3053,"length1":38,"length2":8}]],"length":10589,"saved":false}
{"ts":1363179740789,"patch":[[{"diffs":[[0,"    "],[-1,"\n    private sta"],[0,"\n\n\t/"]],"start1":3037,"start2":3037,"length1":24,"length2":8}]],"length":10573,"saved":false}
{"ts":1363179742094,"patch":[[{"diffs":[[0,";\n\t}"],[-1,"\n    "],[0,"\n\n\t/"]],"start1":3032,"start2":3032,"length1":13,"length2":8}]],"length":10568,"saved":false}
{"ts":1363200384612,"patch":[[{"diffs":[[0,"mespace "],[1,"LFS/"],[0,"PRISM;\n\n"]],"start1":93,"start2":93,"length1":16,"length2":20}]],"length":10572,"saved":false}
{"ts":1363200396307,"patch":[[{"diffs":[[0,"pace LFS"],[-1,"/"],[1,"\\"],[0,"PRISM;\n\n"]],"start1":96,"start2":96,"length1":17,"length2":17}]],"length":10572,"saved":false}
{"ts":1363200474579,"patch":[[{"diffs":[[0,"ace "],[-1,"LFS"],[0,"\\PRI"]],"start1":97,"start2":97,"length1":11,"length2":8}]],"length":10569,"saved":false}
{"ts":1363200476716,"patch":[[{"diffs":[[0,"mespace "],[-1,"\\"],[0,"PRISM;\n\n"]],"start1":93,"start2":93,"length1":17,"length2":16}]],"length":10568,"saved":false}
