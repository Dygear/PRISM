{"ts":1363142400286,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\nclass Timers\n{\n\tprotected $timers = array();\t# Array of timers.\n\tprotected $timeout = NULL;\t\t# When the next timeout is, read only from outside of this class.\n\n\t// Registers a callback method.\n\tprotected function createTimer($callback, $interval = 1.0, $flags = Timer::CLOSE, $args = array()) \n    { \n        # This will be the time when this timer is to trigger \n        $timestamp = microtime(TRUE) + $interval; \n         \n        # Check to make sure that another timer with same timestamp doesn't exist \n        if (isset($this->timers[\"$timestamp\"])) \n        { \n            $this->createTimer($callback, $interval, $flags, $args); \n        } \n        else  \n        { \n            # Adds our timer to the array. \n            $this->timers[\"$timestamp\"] = new Timer($this, $callback, $interval, $flags, $args); \n        } \n    }  \n\n\t// Sort the array to make sure the next timer (smallest float) is on the top of the list.\n\tprotected function sortTimers()\n\t{\n\t\treturn ksort($this->timers);\n\t}\n\n\t// Executes the elapsed timers, and returns when the next timer should execute or NULL if no timers are left.\n\tpublic function executeTimers()\n\t{\n\t\tif (empty($this->timers))\n\t\t\treturn $this->timeout = NULL; # As we don't have any timers to check, we skip the rest of this function.\n\n\t\t$this->sortTimers();\n\n\t\t$timeNow = microtime(TRUE);\n\n\t\tforeach ($this->timers as $timestamp => &$timer)\n\t\t{\n\t\t\t# Check to see if the first timestamp has elpased.\n\t\t\tif ($timeNow < $timestamp)\n\t\t\t\treturn; # If we are not past this timestamp, we go no further.\n\n\t\t\t# Here we execute expired timers.\n\t\t\tif ($timer->execute() != PLUGIN_STOP AND $timer->getFlags() != Timer::CLOSE)\n\t\t\t\t$this->createTimer($timer->getCallback(), $timer->getInterval(), $timer->getFlags(), $timer->getArgs());\n\n\t\t\tunset($this->timers[$timestamp]);\n\t\t}\n\n\t\t$this->timeout = $timestamp;\n\n\t\tif (empty($this->timers))\n\t\t\treturn NULL;\n\t\telse\n\t\t\treturn $this->timeout;\n\t}\n}\n\nclass Timer\n{\n\tconst CLOSE = 0; /** Timer will run once, the default behavior. */\n\tconst REPEAT = 1; /** Timer will repeat until it returns PLUGIN_STOP. */\n\tconst FOREVER = -1; /** Timer will repeat forever, or until the callback function returns PLUGIN_STOP */\n\n\tprotected $parent;\n\tprotected $args;\n\tprotected $callback;\n\tprotected $flags;\n\tprotected $interval;\n\n\tpublic function __construct(&$parent, $callback, $interval = 1.0, $flags = Timer::CLOSE, $args = array())\n\t{\n\t\t$this->parent =& $parent;\n\t\t$this->setCallback($callback);\n\t\t$this->setInterval($interval);\n\t\t$this->setFlags($flags);\n\t\t$this->setArgs($args);\n\t}\n\n\tpublic function setArgs(array $args)\t{ $this->args = $args; }\n\tpublic function getArgs()\t\t\t\t{ return $this->args; }\n\n\tpublic function setCallback($callback)\t{ $this->callback = $callback; }\n\tpublic function getCallback()\t\t\t{ return $this->callback; }\n\n\tpublic function setFlags($flags)\t\t{ $this->flags = $flags; }\n\tpublic function getFlags()\t\t\t\t{ return $this->flags; }\n\n\tpublic function setInterval($interval)\t{ $this->interval = $interval; }\n\tpublic function getInterval()\t\t\t{ return $this->interval; }\n\n/*\tpublic function setRepeat($repeat)\t\t{ $this->repeat = (int) $repeat; }\n\tpublic function getRepeat()\t\t\t\t{ return $this->repeat; } */\n\n\tpublic function execute()\n\t{\n\t\treturn call_user_func_array(array(&$this->parent, $this->callback), $this->args);\n\t}\n}\n?>"]],"start1":0,"start2":0,"length1":0,"length2":3324}]],"length":3324}
{"contributors":[],"silentsave":true,"ts":1363318397308,"patch":[[{"diffs":[[0,"<?php\n"],[1,"\nnamespace PRISM\\Module;\n\n"],[0,"class Ti"]],"start1":0,"start2":0,"length1":14,"length2":40},{"diffs":[[0,"amp\"])) "],[-1,"\n        "],[0,"{ \n     "]],"start1":580,"start2":580,"length1":25,"length2":16},{"diffs":[[0,"}\n}\n"],[-1,"?>"]],"start1":3335,"start2":3335,"length1":6,"length2":4}]],"length":3339,"saved":false}
{"ts":1363318398887,"patch":[[{"diffs":[[0,"tamp\"]))"],[1," "],[0," { \n    "]],"start1":579,"start2":579,"length1":16,"length2":17}]],"length":3340,"saved":false}
{"ts":1363318400128,"patch":[[{"diffs":[[0,"tamp\"]))"],[-1," "],[0," { \n    "]],"start1":579,"start2":579,"length1":17,"length2":16}]],"length":3339,"saved":false}
{"ts":1363318402803,"patch":[[{"diffs":[[0,"      } "],[-1,"\n        "],[0,"else  \n "]],"start1":663,"start2":663,"length1":25,"length2":16}]],"length":3330,"saved":false}
{"ts":1363318405615,"patch":[[{"diffs":[[0,"} else  "],[-1,"\n        "],[0,"{ \n     "]],"start1":669,"start2":669,"length1":25,"length2":16}]],"length":3321,"saved":false}
{"ts":1363318407544,"patch":[[{"diffs":[[0," } else "],[-1," "],[0,"{ \n     "]],"start1":668,"start2":668,"length1":17,"length2":16}]],"length":3320,"saved":false}
{"ts":1363318412278,"patch":[[{"diffs":[[0,"($this->timers))"],[1," {"],[0,"\n\t\t\treturn $this"]],"start1":1161,"start2":1161,"length1":32,"length2":34}]],"length":3322,"saved":false}
{"ts":1363318414884,"patch":[[{"diffs":[[0,"unction."],[1,"\n\t\t}"],[0,"\n\n\t\t$thi"]],"start1":1279,"start2":1279,"length1":16,"length2":20}]],"length":3326,"saved":false}
{"ts":1363318420100,"patch":[[{"diffs":[[0,"&$timer)"],[-1,"\n\t\t"],[0,"{\n\t\t\t# C"]],"start1":1390,"start2":1390,"length1":19,"length2":16}]],"length":3323,"saved":false}
{"ts":1363318421451,"patch":[[{"diffs":[[0,"&$timer)"],[1," "],[0,"{\n\t\t\t# C"]],"start1":1390,"start2":1390,"length1":16,"length2":17}]],"length":3324,"saved":false}
{"ts":1363318423550,"patch":[[{"diffs":[[0,"mestamp)"],[1," {"],[0,"\n\t\t\t\tret"]],"start1":1476,"start2":1476,"length1":16,"length2":18}]],"length":3326,"saved":false}
{"ts":1363318426913,"patch":[[{"diffs":[[0,"further."],[1,"\n\t\t\t}"],[0,"\n\n\t\t\t# H"]],"start1":1545,"start2":1545,"length1":16,"length2":21}]],"length":3331,"saved":false}
{"ts":1363318429230,"patch":[[{"diffs":[[0,"::CLOSE)"],[1," {"],[0,"\n\t\t\t\t$th"]],"start1":1668,"start2":1668,"length1":16,"length2":18}]],"length":3333,"saved":false}
{"ts":1363318432502,"patch":[[{"diffs":[[0,"Args());"],[1,"\n                "],[0,"\n\n\t\t\tuns"]],"start1":1779,"start2":1779,"length1":16,"length2":33}]],"length":3350,"saved":false}
{"ts":1363318433956,"patch":[[{"diffs":[[0,"));\n"],[-1,"                "],[1,"\t\t\t}"],[0,"\n\n\t\t"]],"start1":1784,"start2":1784,"length1":24,"length2":12}]],"length":3338,"saved":false}
{"ts":1363318439910,"patch":[[{"diffs":[[0,"timers))"],[1," {"],[0,"\n\t\t\tretu"]],"start1":1887,"start2":1887,"length1":16,"length2":18}]],"length":3340,"saved":false}
{"ts":1363318442909,"patch":[[{"diffs":[[0,"NULL;\n\t\t"],[1,"} "],[0,"else\n\t\t\t"]],"start1":1908,"start2":1908,"length1":16,"length2":18}]],"length":3342,"saved":false}
{"ts":1363318446491,"patch":[[{"diffs":[[0,"\treturn "],[-1,"NULL"],[1,"null"],[0,";\n\t\t} el"]],"start1":1900,"start2":1900,"length1":20,"length2":20}]],"length":3342,"saved":false}
{"ts":1363318449294,"patch":[[{"diffs":[[0,"\t\t} else"],[1," {"],[0,"\n\t\t\tretu"]],"start1":1914,"start2":1914,"length1":16,"length2":18}]],"length":3344,"saved":false}
{"ts":1363318452220,"patch":[[{"diffs":[[0,"imeout;\n"],[1,"\t\t}\n"],[0,"\t}\n}\n\ncl"]],"start1":1943,"start2":1943,"length1":16,"length2":20}]],"length":3348,"saved":false}
{"ts":1363318467676,"patch":[[{"diffs":[[0,"<?php\n"],[1,"# "],[0,"\nnamespa"]],"start1":0,"start2":0,"length1":14,"length2":16}]],"length":3350,"saved":false}
{"ts":1363318470542,"patch":[[{"diffs":[[0,"<?php\n# "],[1,"Almost PS"],[0,"\nnamespa"]],"start1":0,"start2":0,"length1":16,"length2":25}]],"length":3359,"saved":false}
{"ts":1363318471743,"patch":[[{"diffs":[[0,"lmost PS"],[1,"R"],[0,"\nnamespa"]],"start1":9,"start2":9,"length1":16,"length2":17}]],"length":3360,"saved":false}
