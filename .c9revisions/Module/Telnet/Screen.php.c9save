{"ts":1363211555097,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * PHPInSimMod - Telnet Module\n * @package PRISM\n * @subpackage Telnet\n*/\n\n// Screen object options\ndefine('TS_OPT_ISSELECTABLE', 1);\ndefine('TS_OPT_ISSELECTED', 2);\ndefine('TS_OPT_ISEDITABLE', 4);\ndefine('TS_OPT_HASBACKGROUND', 8);\ndefine('TS_OPT_BOLD', 16);\n\n/**\n * ScreenObject is the base class for all screen components\n * (ScreenContainer, TextLine, TextArea, etc)\n*/\nabstract class ScreenObject\n{\n\tabstract public function draw();\n\n\tprivate $id\t\t\t\t= '';\n\tprivate $x\t\t\t\t= 0;\n\tprivate $y\t\t\t\t= 0;\n\tprivate $absolute\t\t= false;\t\t\t// Absolute position or relative to parent\n\tprivate $cols\t\t\t= 0;\t\t\t\t// width\n\tprotected $realWidth\t= 0;\n\tprivate $lines\t\t\t= 0;\t\t\t\t// height\n\tprotected $realHeight\t= 0;\n\t\n\tprivate $ttype\t\t\t= 0;\n\tprivate $visible\t\t= true;\n\tprivate $border\t\t\t= TS_BORDER_NONE;\t// border type\n\tprivate $margin\t\t\t= 0;\t\t\t\t// border margin\n\tprivate $caption\t\t= '';\n\tprivate $options\t\t= 0;\t\t\t\t// Selectable, selected, has background, editable, etc\n\t\n\tprotected $screenCache\t= '';\t\t\t\t// object contents cache\n\t\n\tpublic function setId($id)\n\t{\n\t\t$this->id = $id;\n\t}\n\t\n\tpublic function getId()\n\t{\n\t\treturn $this->id;\n\t}\n\t\n\tpublic function setTType($ttype)\n\t{\n\t\t$this->ttype = $ttype;\n\t}\n\t\n\tpublic function getTType()\n\t{\n\t\treturn $this->ttype;\n\t}\n\t\n\tpublic function setLocation($x, $y)\n\t{\n\t\t$this->setX($x);\n\t\t$this->setY($y);\n\t}\n\t\n\tpublic function setVisible($visible)\n\t{\n\t\t$this->visible = $visible;\n\t}\n\t\n\tpublic function isVisible()\n\t{\n\t\treturn $this->visible;\n\t}\n\t\n\tpublic function setX($x)\n\t{\n\t\t$x = (int) $x;\n\t\tif ($x < 0)\n\t\t\t$x = 0;\n\t\t$this->x\t\t= $x;\n\t}\n\t\n\tpublic function setY($y)\n\t{\n\t\t$y = (int) $y;\n\t\tif ($y < 0)\n\t\t\t$y = 0;\n\t\t$this->y\t\t= $y;\n\t}\n\t\n\tpublic function getLocation()\n\t{\n\t\treturn array($this->x, $this->y);\n\t}\n\t\n\tpublic function getX()\n\t{\n\t\treturn $this->x;\n\t}\n\t\n\tpublic function getY()\n\t{\n\t\treturn $this->y;\n\t}\n\t\n\tpublic function setAbsolute($absolute)\n\t{\n\t\t$this->absolute = $absolute;\n\t}\n\t\n\tpublic function getAbsolute()\n\t{\n\t\treturn $this->absolute;\n\t}\n\t\n\tpublic function setSize($cols, $lines)\n\t{\n\t\t$this->setWidth($cols);\n\t\t$this->setHeight($lines);\n\t}\n\t\n\tpublic function setWidth($cols)\n\t{\n\t\t$cols = (int) $cols;\n\t\tif ($cols < 0)\n\t\t\t$cols = 0;\n\t\t$this->cols\t\t\t= $cols;\n\t\t$this->screenCache\t= '';\n\t}\n\n\tpublic function setHeight($lines)\n\t{\n\t\t$lines = (int) $lines;\n\t\tif ($lines < 0)\n\t\t\t$lines = 0;\n\t\t$this->lines\t\t= $lines;\n\t\t$this->screenCache\t= '';\n\t}\n\n\tpublic function getSize()\n\t{\n\t\treturn array($this->cols, $this->lines);\n\t}\n\n\tpublic function getWidth()\n\t{\n\t\treturn $this->cols;\n\t}\n\n\tpublic function getHeight()\n\t{\n\t\treturn $this->lines;\n\t}\n\t\n\tpublic function getRealWidth()\n\t{\n\t\treturn $this->realWidth;\n\t}\n\n\tpublic function getRealHeight()\n\t{\n\t\treturn $this->realHeight;\n\t}\n\t\n\tpublic function setBorder($border)\n\t{\n\t\t$border = (int) $border;\n\t\tif ($border < 0 || $border > TS_BORDER_NUMTYPES)\n\t\t\t$border = 0;\n\t\t$this->border = $border;\n\t\t$this->screenCache\t= '';\n\t}\n\t\n\tpublic function getBorder()\n\t{\n\t\treturn $this->border;\n\t}\n\n\tpublic function setMargin($margin)\n\t{\n\t\t$margin = (int) $margin;\n\t\tif ($margin < 0)\n\t\t\t$margin = 0;\n\t\t$this->margin = $margin;\n\t\t$this->screenCache\t= '';\n\t}\n\t\n\tpublic function getMargin()\n\t{\n\t\treturn $this->margin;\n\t}\n\n\tpublic function getCaption()\n\t{\n\t\treturn $this->caption;\n\t}\n\t\n\tpublic function setCaption($caption)\n\t{\n\t\t$this->caption\t\t= $caption;\n\t\t$this->screenCache\t= '';\n\t}\n\t\n\tpublic function setOptions($options)\n\t{\n\t\t$this->options = $options;\n\t\t$this->screenCache = '';\n\t}\n\t\n\tpublic function getOptions()\n\t{\n\t\treturn $this->options;\n\t}\n\t\n\tpublic function toggleSelected()\n\t{\n\t\tif ($this->options & TS_OPT_ISSELECTABLE)\n\t\t{\n\t\t\tif ($this->options & TS_OPT_ISSELECTED)\n\t\t\t\t$this->options &= ~TS_OPT_ISSELECTED;\n\t\t\telse\n\t\t\t\t$this->options |= TS_OPT_ISSELECTED;\n\t\t\t$this->screenCache = '';\n\t\t}\n\t}\n\t\n\tpublic function setSelected($selected)\n\t{\n\t\tif ($selected)\n\t\t\t$this->options |= TS_OPT_ISSELECTED;\n\t\telse\n\t\t\t$this->options &= ~TS_OPT_ISSELECTED;\n\t\t$this->screenCache = '';\n\t}\n\t\n\tpublic function setBold($bold)\n\t{\n\t\tif ($bold)\n\t\t\t$this->options |= TS_OPT_BOLD;\n\t\telse\n\t\t\t$this->options &= ~TS_OPT_BOLD;\n\t}\n\t\n\tpublic function clearCache()\n\t{\n\t\t$this->screenCache = '';\n\t}\n\t\n\tprotected function drawBorder()\n\t{\n\t\t$screenBuf = '';\n\n\t\t// Draw own style (backgroud? border?)\n\t\tif ($this->getBorder() > TS_BORDER_NONE)\n\t\t{\n\t\t\t// Initialise border helper object\n\t\t\t$bHelp = new ScreenBorderHelper($this->getTType());\n\t\t\t$screenBuf .= $bHelp->start();\n\n\t\t\t// Draw border stuff\n\t\t\t$line = 0;\n\t\t\twhile ($line < $this->getRealHeight())\n\t\t\t{\n\t\t\t\t// Move to new line (if not on line 0)\n\t\t\t\tif ($line > 0)\n\t\t\t\t{\n\t\t\t\t\t$screenBuf .= KEY_ESCAPE.'['.$this->realWidth.'D'.KEY_ESCAPE.'[1B';\n\t\t\t\t}\n\n\t\t\t\t// First and last line\n\t\t\t\tif ($line == 0 || $line == $this->getRealHeight() - 1)\n\t\t\t\t{\n\t\t\t\t\t$pos = 0;\n\t\t\t\t\twhile ($pos < $this->realWidth)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($line == 0 && $pos == 0)\n\t\t\t\t\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_TOPLEFT);\n\t\t\t\t\t\telse if ($line == 0 && $pos == $this->realWidth-1)\n\t\t\t\t\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_TOPRIGHT);\n\t\t\t\t\t\telse if ($line == $this->getRealHeight() - 1 && $pos == 0)\n\t\t\t\t\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_BOTTOMLEFT);\n\t\t\t\t\t\telse if ($line == $this->getRealHeight() - 1 && $pos == $this->realWidth-1)\n\t\t\t\t\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_BOTTOMRIGHT);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_HORILINE);\n\t\t\t\t\t\t$pos++;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Caption on border?\n\t\t\t\t\tif ($line == 0 && $this->getCaption() != '')\n\t\t\t\t\t{\n\t\t\t\t\t\t$screenBuf .= $bHelp->end();\n\n\t\t\t\t\t\t$cLen = strlen($this->getCaption());\n\t\t\t\t\t\t$captionX = floor(($this->realWidth - $cLen) / 2);\n\n\t\t\t\t\t\t$screenBuf .= KEY_ESCAPE.'['.($this->realWidth - $captionX).'D';\n\t\t\t\t\t\t$screenBuf .= $this->getCaption();\n\t\t\t\t\t\t$screenBuf .= KEY_ESCAPE.'['.($this->realWidth - ($cLen + $captionX)).'C';\n\n\t\t\t\t\t\t$screenBuf .= $bHelp->start();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Place border only on first and last char\n\t\t\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_VERTLINE);\n\t\t\t\t\t$screenBuf .= KEY_ESCAPE.'['.($this->realWidth - 2).'C';\n\t\t\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_VERTLINE);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$line++;\n\t\t\t}\n\n\t\t\t// Always end border helper (because we may have to reset charset).\n\t\t\t$screenBuf .= $bHelp->end();\n\t\t\tunset($bHelp);\n\t\t}\n\t\telse\n\t\t// Caption without border?\n\t\tif ($this->getCaption() != '')\n\t\t{\n\t\t\t$cLen = strlen($this->getCaption());\n\t\t\t$captionX = floor(($this->realWidth - $cLen) / 2);\n\t\t\t$screenBuf .= str_pad('', $captionX, ' ');\n\t\t\t$screenBuf .= str_pad($this->getCaption(), $this->realWidth - $captionX, ' ');\n\t\t}\n\t\t\n\t\treturn $screenBuf;\n\t}\n}\n\n/**\n * ScreenContainer is a base class that can contain other screen objects.\n*/\nabstract class ScreenContainer extends ScreenObject\n{\n\tprotected $screenObjects\t\t= array();\n\t\n\tpublic function add(ScreenObject $object)\n\t{\n\t\t$this->screenObjects[] = $object;\n\t}\n\t\n\tpublic function remove(ScreenObject $object)\n\t{\n\t\tforeach ($this->screenObjects as $index => $ob)\n\t\t{\n\t\t\tif ($object === $ob)\n\t\t\t{\n\t\t\t\tunset($this->screenObjects[$index]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function removeAll()\n\t{\n\t\t$this->screenObjects = array();\n\t}\n\n\tpublic function removeById($objectId)\n\t{\n\t\tforeach ($this->screenObjects as $index => $ob)\n\t\t{\n\t\t\tif ($objectId == $ob->getId())\n\t\t\t{\n\t\t\t\tunset($this->screenObjects[$index]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getObjectById($objectId)\n\t{\n\t\tforeach ($this->screenObjects as $index => $ob)\n\t\t{\n\t\t\tif ($objectId == $ob->getId())\n\t\t\t{\n\t\t\t\treturn $ob;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic function getObjectByIndex($index)\n\t{\n\t\tif (isset($this->screenObjects[$index]))\n\t\t\treturn $this->screenObjects[$index];\n\t\treturn null;\n\t}\n\t\n\tpublic function getNumObjects()\n\t{\n\t\treturn count($this->screenObjects);\n\t}\n\t\n\tpublic function draw()\n\t{\n\t\t$screenBuf = '';\n\t\t$this->realWidth = $this->getWidth();\n\t\t$this->realHeight = $this->getHeight();\n\t\t\n\t\tforeach ($this->screenObjects as $object)\n\t\t{\n\t\t\tif (!$object->isVisible())\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t// Draw the object and place it on its x and y\n\t\t\t$screenBuf .= KEY_ESCAPE.'['.$object->getY().';'.$object->getX().'H';\n\t\t\t$screenBuf .= $object->draw();\n\t\t}\n\t\t\n\t\tif ($this->getBorder())\n\t\t{\n\t\t\t$screenBuf .= KEY_ESCAPE.'['.$this->getY().';'.$this->getX().'H';\n\t\t\t$screenBuf .= $this->drawBorder();\n\t\t}\n\n\t\treturn $screenBuf;\n\t}\n\t\n\tpublic function updateTTypes($ttype)\n\t{\n\t\tforeach ($this->screenObjects as $object)\n\t\t{\n\t\t\t$object->setTType($ttype);\n\t\t\tif (is_subclass_of($object, 'ScreenContainer'))\n\t\t\t\t$object->updateTTypes($ttype);\n\t\t\t$object->clearCache();\n\t\t}\n\t}\n}\n\n/**\n * The TelnetScreen class is the Parent container that holds all visual components\n*/\nabstract class TelnetScreen extends ScreenContainer\n{\n\tabstract protected function write($data, $sendQPacket = FALSE);\n\t\n\tprotected $winSize\t\t\t\t= null;\n\tprotected $modeState\t\t\t= 0;\n\t\n\tprotected $screenBuf\t\t\t= '';\n\tprotected $cursorProperties\t\t= 0;\n\t\n\tprivate $postCurPos\t\t\t\t= null;\n\t\n\tprotected function writeBuf($string)\n\t{\n\t\t$this->screenBuf .= $string;\n\t}\n\t\n\tprotected function writeLine($line, $crlf = true)\n\t{\n\t\t$this->screenBuf .= $line.(($crlf) ? \"\\r\\n\" : '');\n\t}\n\t\n\tprotected function writeAt($string, $x, $y)\n\t{\n\t\t$this->screenBuf .= KEY_ESCAPE.'['.$y.';'.$x.'H';\n\t\t$this->screenBuf .= $string;\n\t}\n\t\n\tprotected function setWinSize($width, $height)\n\t{\n\t\t$firstTime = ($this->winSize === null) ? true : false;\n\t\t$this->winSize = array($width, $height);\n\t\t$this->setSize($width, $height);\n\t\tif (!$firstTime)\n\t\t\t$this->redraw();\n\t}\n\t\t\n\tprotected function setCursorProperties($properties = 0)\n\t{\n\t\t$this->cursorProperties = $properties;\n\t\t\n\t\tif ($this->getTType() == TELNET_TTYPE_XTERM)\n\t\t{\n\t\t\tif ($this->cursorProperties & TELNET_CURSOR_HIDE)\n\t\t\t\t$this->screenBuf .= KEY_ESCAPE.'[?25l';\n\t\t\telse\n\t\t\t\t$this->screenBuf .= KEY_ESCAPE.'[?25h';\n\t\t}\n\t}\n\n\tprotected function screenClear($goHome = false)\n\t{\n\t\t$this->screenBuf .= VT100_ED2;\n\t\tif ($goHome)\n\t\t\t$this->screenBuf .= VT100_CURSORHOME;\n\t}\n\t\n\tprotected function flush()\n\t{\n\t\tif ($this->screenBuf)\n\t\t\t$this->write($this->screenBuf);\n\t\t$this->screenBuf = '';\n\t}\n\t\n\tpublic function setPostCurPos(array $curPos)\n\t{\n\t\tif (!isset($curPos[0]))\n\t\t\t$this->postCurPos = null;\n\t\telse\n\t\t\t$this->postCurPos = $curPos;\n\t}\n\t\n\tprotected function redraw()\n\t{\n\t\t// Clear Screen\n\t\t$this->screenBuf .= VT100_ED2;\n\t\t\n\t\t// Draw components\n\t\t$this->screenBuf .= $this->draw();\n\t\t\n\t\t// Park cursor?\n\t\tif ($this->postCurPos !== null)\n\t\t{\n\t\t\t$this->screenBuf .= KEY_ESCAPE.'['.$this->postCurPos[1].';'.$this->postCurPos[0].'H';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (($this->modeState & TELNET_MODE_LINEEDIT) == 0 && $this->getTType() != TELNET_TTYPE_XTERM)\n\t\t\t\t$this->screenBuf .= KEY_ESCAPE.'[0;'.($this->getWidth() - 1).'H';\n//\t\t\t\t$this->screenBuf .= KEY_ESCAPE.'['.$this->winSize[1].';'.$this->winSize[0].'H';\n\t\t}\n\t\t\n\t\t// Flush buffer to client\n\t\t$this->flush();\n\t}\n\t\n\tprotected function clearObjects($clearScreen = false)\n\t{\n\t\t$this->screenObjects = array();\n\t\tif ($clearScreen)\n\t\t\t$this->screenClear(true);\n\t}\n}\n\nclass TSTextArea extends ScreenObject\n{\n\tprotected $text\t\t= '';\n\t\n\tpublic function __construct($x = 0, $y = 0, $cols = 0, $lines = 0)\n\t{\n\t\t$this->setLocation($x, $y);\n\t\t$this->setSize($cols, $lines);\n\t}\n\t\n\tpublic function getText()\n\t{\n\t\treturn $this->text;\n\t}\n\t\n\tpublic function setText($text)\n\t{\n\t\t$this->text\t\t\t= $text;\n\t\t$this->screenCache\t= '';\n\t}\n\t\n\tpublic function draw()\n\t{\n\t\tif ($this->screenCache != '')\n\t\t\treturn $this->screenCache;\n\t\t\n\t\t$screenBuf = '';\n\t\t$screenMargin = 0;\n\t\t$pos = 0;\n\t\t$this->realWidth = 0;\n\t\t$this->realHeight = 0;\n\n\t\tif ($this->getBorder() || $this->getCaption())\n\t\t{\n\t\t\t// Increase screenMargin by one, to indicate this object will be surrounded by one 'pixel'\n\t\t\t$screenMargin++;\n\t\t\t\n\t\t\t// move the cursor down a line, for content. We'll draw the border after that.\n\t\t\t$screenBuf .= KEY_ESCAPE.'[1B';\n\t\t\t\n\t\t\t// Count this top line\n\t\t\t$this->realHeight++;\n\t\t}\n\n\t\t$style = '';\n\t\tif (($this->getOptions() & TS_OPT_ISEDITABLE) == 0 && ($this->getOptions() & TS_OPT_HASBACKGROUND || $this->getOptions() & TS_OPT_ISSELECTED))\n\t\t\t$style .= VT100_STYLE_REVERSE;\n\t\tif ($this->getOptions() & TS_OPT_BOLD)\n\t\t\t$style .= VT100_STYLE_BOLD;\n\n\t\t$screenBuf .= $style;\n\n\t\t// Draw content (text)\n\t\tforeach ($this->prepareTags() as $word)\n\t\t{\n\t\t\t$wLen = strlen($word[0]);\n\t\t\t\n\t\t\t// If regular word, check for line wrapping and such\n\t\t\tif ($word[1] == 0)\n\t\t\t{\n\t\t\t\t// Skip space at start of line (after line wrap)?\n\t\t\t\tif ($pos <= $screenMargin && $word[0] == '')\n\t\t\t\t\tcontinue;\n\t\n\t\t\t\t// Line wrap?\n\t\t\t\tif ($pos + $wLen > $this->getWidth() - $screenMargin || $word[0] == KEY_ENTER)\n\t\t\t\t{\n\t\t\t\t\t// Padding until the end of cols\n\t\t\t\t\twhile ($pos < $this->getWidth() - $screenMargin)\n\t\t\t\t\t{\n\t\t\t\t\t\t$screenBuf .= ' ';\n\t\t\t\t\t\t$pos++;\n\t\t\t\t\t\tif ($pos > $this->realWidth)\n\t\t\t\t\t\t\t$this->realWidth = $pos;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Stop if we've ran out of space (include screenMargin to check for bottom border\n\t\t\t\t\tif (++$this->realHeight == $this->getHeight())\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\t// Line wrap\n\t\t\t\t\t$screenBuf .= KEY_ESCAPE.'['.$pos.'D'.KEY_ESCAPE.'[1B';\n\t\t\t\t\t$pos = 0;\n\t\t\t\t\t\n\t\t\t\t\tif ($word[0] == KEY_ENTER || $word[0] == ' ')\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// compensate for (left)margin?\n\t\t\t\tif ($pos == 0 && $screenMargin > 0) {\n\t\t\t\t\t$screenBuf .= KEY_ESCAPE.'['.$screenMargin.'C';\n\t\t\t\t\t$pos += $screenMargin;\n\t\t\t\t\tif ($pos > $this->realWidth)\n\t\t\t\t\t\t$this->realWidth = $pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$pos += $wLen;\n\t\t\t\t$screenBuf .= $word[0];\n\n\t\t\t\tif ($pos > $this->realWidth)\n\t\t\t\t\t$this->realWidth = $pos;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Add style tag (not a word)\n\t\t\t\t$screenBuf .= $word[0];\n\n\t\t\t\t// Reactivate background after a style reset?\n\t\t\t\tif ($word[0] == VT100_STYLE_RESET)\n\t\t\t\t\t$screenBuf .= $style;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Padding until the end of cols\n\t\twhile ($pos < $this->getWidth() - $screenMargin)\n\t\t{\n\t\t\t$screenBuf .= ' ';\n\t\t\t$pos++;\n\t\t\tif ($pos > $this->realWidth)\n\t\t\t\t$this->realWidth = $pos;\n\t\t}\n\n\t\t// Turn off background?\n\t\tif ($style != '')\n\t\t\t$screenBuf .= VT100_STYLE_RESET;\n\n\t\t// Still have to count the last line we drew\n\t\t$this->realHeight++;\n\n\t\t// If there's a border, increase realWidth by one (to include right border)\n\t\tif ($this->getBorder())\n\t\t{\n\t\t\t$this->realWidth++;\n\t\t}\n\n\t\t// If we have to draw a border or caption, do so here\n\t\tif ($this->getBorder() || $this->getCaption())\n\t\t{\n\t\t\t// Compesate realHeight\n\t\t\tif ($this->getBorder())\n\t\t\t\t$this->realHeight += 1;\n\n\t\t\t$screenBuf .= KEY_ESCAPE.'['.($this->realWidth - 1).'D'.KEY_ESCAPE.'['.($this->realHeight - 2).'A';\n\t\t\t$screenBuf .= $this->drawBorder();\n\t\t\t\n\t\t}\n\n\t\t//console('object width : '.$this->realWidth.' | object height : '.$this->realHeight);\n\n\t\t$this->screenCache = $screenBuf;\n\t\treturn $screenBuf;\n\t}\n\t\n\t// Split style tags into their own entry in $words and mark them as such\n\tprivate function prepareTags()\n\t{\n\t\t$words = explode(' ', $this->text);\n\t\t$out = array();\n\n\t\tforeach ($words as $word)\n\t\t{\n\t\t\t$matches = array();\n\t\t\tif (preg_match_all('/'.KEY_ESCAPE.'\\[(\\d*)m/', $word, $matches, PREG_OFFSET_CAPTURE))\n\t\t\t{\n\t\t\t\t$cutOffset = 0;\n\t\t\t\tforeach ($matches[0] as $match)\n\t\t\t\t{\n\t\t\t\t\t$mLen = strlen($match[0]);\n\t\t\t\t\t$match[1] -= $cutOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Do we have chars BEFORE this tag? (that means regular chars)\n\t\t\t\t\tif ($match[1] > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Split those regular chars into its own array entry\n\t\t\t\t\t\t$exp = explode(KEY_ENTER, substr($word, 0, $match[1]));\n\t\t\t\t\t\tforeach ($exp as $i => $e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($i > 0)\n\t\t\t\t\t\t\t\t$out[] = array(KEY_ENTER, 0);\n\t\t\t\t\t\t\t$out[] = array($e, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Then the tag\n\t\t\t\t\t\t$out[] = array($match[0], 1);\n\n\t\t\t\t\t\t$word = substr($word, $match[1] + $mLen);\n\t\t\t\t\t\t$cutOffset += $match[1] + $mLen;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$out[] = array($match[0], 1);\n\t\t\t\t\t\t$word = substr($word, $mLen);\n\t\t\t\t\t\t$cutOffset += $mLen;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Are there still regular chars after all the tags?\n\t\t\t\tif ($word != '')\n\t\t\t\t{\n\t\t\t\t\t$exp = explode(KEY_ENTER, $word);\n\t\t\t\t\tforeach ($exp as $i => $e)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($i > 0)\n\t\t\t\t\t\t\t$out[] = array(KEY_ENTER, 0);\n\t\t\t\t\t\t$out[] = array($e, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Regular word\n\t\t\t\t$exp = explode(KEY_ENTER, $word);\n\t\t\t\tforeach ($exp as $i => $e)\n\t\t\t\t{\n\t\t\t\t\tif ($i > 0)\n\t\t\t\t\t\t$out[] = array(KEY_ENTER, 0);\n\t\t\t\t\t$out[] = array($e, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Add the space between words to $out (it was stripped in the explode())\n\t\t\t$out[] = array(' ', 0);\n\t\t}\n\t\tarray_pop($out);\n\t\t\n\t\treturn $out;\n\t}\n}\n\nclass TSTextInput extends TSTextArea\n{\n\tprivate $maxLength\t= 24;\n\t\n\tpublic function setMaxLength($maxLength)\n\t{\n\t\t$this->maxLength = (int) $maxLength;\n\t}\n\t\n\tpublic function getMaxLength()\n\t{\n\t\treturn $this->maxLength;\n\t}\n}\n\nclass TSHLine extends ScreenObject\n{\n\tpublic function __construct($x, $y, $width)\n\t{\n\t\t$this->setLocation($x, $y);\n\t\t$this->setWidth($width);\n\t}\n\t\n\tpublic function draw()\n\t{\n\t\t$bHelp = new ScreenBorderHelper($this->getTType());\n\t\t\n\t\t$screenBuf = $bHelp->start();\n\t\tfor ($a=0; $a<$this->getWidth(); $a++)\n\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_HORILINE);\n\t\t$screenBuf .= $bHelp->end();\n\t\t\n\t\treturn $screenBuf;\n\t}\n}\n\nclass TSVLine extends ScreenObject\n{\n\tpublic function __construct($x, $y, $height)\n\t{\n\t\t$this->setLocation($x, $y);\n\t\t$this->setHeight($height);\n\t}\n\t\n\tpublic function draw()\n\t{\n\t\t$bHelp = new ScreenBorderHelper($this->getTType());\n\t\t\n\t\t$screenBuf = $bHelp->start();\n\t\tfor ($a=0; $a<$this->getHeight(); $a++)\n\t\t{\n\t\t\t$screenBuf .= $bHelp->getChar(TC_BORDER_VERTLINE);\n\t\t\t$screenBuf .= KEY_ESCAPE.'[B'.KEY_ESCAPE.'[D';\n\t\t}\n\t\t$screenBuf .= $bHelp->end();\n\t\t\n\t\treturn $screenBuf;\n\t}\n}\n\nabstract class TSSection extends ScreenContainer\n{\n\tabstract public function handleKey($key);\n\tabstract protected function selectItem();\n\tabstract protected function setInputMode();\n\t\n\t// Section info\n\tprivate $active\t\t\t= false;\t\t// Whether this section has KB focus\n\tprivate $curItem\t\t= -1;\t\t\t// pointer to selected item\n\tprotected $subSection\t= null;\t\t\t// This holds the currently selected subsection object (another TSSection)\n\t\n\tprotected $parentSection\t= null;\t\t\t// Parent section object, so we can recursively go down AND up\n\t\n\tpublic function __construct(ScreenContainer $parentSection)\n\t{\n\t\t$this->parentSection = $parentSection;\n\t}\n\t\n\tpublic function __destruct()\n\t{\n\t\t$this->subSection = null;\n\t\t$this->parentSection = null;\n\t}\n\t\n\tprotected function resetSection($hard = false)\n\t{\n\t\t$this->curItem = -1;\n\t\t\n\t\tif ($hard)\n\t\t{\n\t\t\t\n\t\t}\n\t}\n\t\n\tprotected function setInputCallback($class, $func = null, $editMode = 0, array $curPos = array(0, 0), $defaultText = '', $maxLength = 23)\n\t{\n\t\tif (get_class($this->parentSection) == 'PrismTelnet')\n\t\t{\n\t\t\tif ($class === null)\n\t\t\t{\n\t\t\t\t$this->parentSection->registerInputCallback($this->parentSection, 'handleKey');\n\t\t\t\t$this->parentSection->setPostCurPos(array());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->parentSection->registerInputCallback($class, $func, $editMode);\n\t\t\t\t$this->parentSection->setLineBuffer($defaultText);\n\t\t\t\t$this->parentSection->setInputBufferMaxLen($maxLength);\n\t\t\t\tif ($editMode)\n\t\t\t\t\t$this->parentSection->setPostCurPos($curPos);\n\t\t\t\telse\n\t\t\t\t\t$this->parentSection->setPostCurPos(array());\n\t\t\t}\n//\t\t\tconsole('Recursive : found final parent');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->parentSection->setInputCallback($class, $func, $editMode, $curPos, $defaultText, $maxLength);\n//\t\t\tconsole('Recursive : continuing up');\n\t\t}\n\t}\n\t\n\tprotected function getLine()\n\t{\n\t\tif (get_class($this->parentSection) == 'PrismTelnet')\n\t\t{\n\t\t\treturn $this->parentSection->getLine(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $this->parentSection->getLine();\n\t\t}\n\t}\n\t\n\tpublic function setActive($active)\n\t{\n\t\t$this->active = (boolean) $active;\n\t\tif ($this->getCurObject() === null)\n\t\t\treturn;\n\t\t\n\t\tif ($active)\n\t\t{\n\t\t\t$this->getCurObject()->setSelected(true);\n//\t\t\tconsole('ACTIVATING '.$this->getCurObject()->getId());\n\t\t\t$this->setInputMode();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->getCurObject()->setSelected(false);\n\t\t\t$this->setInputCallback(null);\n//\t\t\tconsole('DE-ACTIVATING'.$this->getCurObject()->getId());\n\t\t}\n\t}\n\t\n\tpublic function getActive()\n\t{\n\t\treturn $this->active;\n\t}\n\t\n\tprotected function getCurObject()\n\t{\n\t\tif ($this->curItem == -1)\n\t\t\treturn $this->nextItem(true);\n\t\treturn $this->getObjectByIndex($this->curItem);\n\t}\n\t\n\tprotected function nextItem($first = false)\n\t{\n\t\t// find selected object\n\t\t$old = null;\n\t\t$a = ($this->curItem < 0) ? 0 : $this->curItem;\n\t\twhile ($object = $this->getObjectByIndex($a))\n\t\t{\n\t\t\tif ($old === null)\n\t\t\t{\n\t\t\t\tif ($first && $object->getOptions() & TS_OPT_ISSELECTABLE)\n\t\t\t\t{\n\t\t\t\t\treturn $object;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ($object->getOptions() & TS_OPT_ISSELECTED)\n\t\t\t\t{\n\t\t\t\t\t$old = $object;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($object->getOptions() & TS_OPT_ISSELECTABLE)\n\t\t\t\t{\n\t\t\t\t\t// Input TextArea lost focus 'the good way' - we need to grab linebufer and store it in old object\n\t\t\t\t\tif ($old->getOptions() & TS_OPT_ISEDITABLE)\n\t\t\t\t\t{\n\t\t\t\t\t\t$old->setText($this->getLine());\n\t\t\t\t\t}\n\t\t\t\t\t$old->toggleSelected();\n\t\t\t\t\t$object->toggleSelected();\n\t\t\t\t\t$this->curItem = $a;\n\t\t\t\t\treturn $object;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$a++;\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\tprotected function previousItem()\n\t{\n\t\t$old = null;\n\t\t$a = ($this->curItem < 0) ? ($this->getNumObjects() -1) : $this->curItem;\n\t\twhile ($object = $this->getObjectByIndex($a))\n\t\t{\n\t\t\tif ($old === null)\n\t\t\t{\n\t\t\t\tif ($object->getOptions() & TS_OPT_ISSELECTED)\n\t\t\t\t{\n\t\t\t\t\t$old = $object;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($object->getOptions() & TS_OPT_ISSELECTABLE)\n\t\t\t\t{\n\t\t\t\t\t// Input TextArea lost focus 'the good way' - we need to grab linebufer and store it in old object\n\t\t\t\t\tif ($old->getOptions() & TS_OPT_ISEDITABLE)\n\t\t\t\t\t{\n\t\t\t\t\t\t$old->setText($this->getLine());\n\t\t\t\t\t}\n\t\t\t\t\t$old->toggleSelected();\n\t\t\t\t\t$object->toggleSelected();\n\t\t\t\t\t$this->curItem = $a;\n\t\t\t\t\treturn $object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$a--;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\ndefine('TS_BORDER_NONE',\t\t0);\ndefine('TS_BORDER_REGULAR',\t\t1);\ndefine('TS_BORDER_DOUBLE',\t\t2);\ndefine('TS_BORDER_NUMTYPES',\t3);\n\ndefine('TC_BORDER_TOPLEFT',\t\t0);\ndefine('TC_BORDER_TOPRIGHT',\t1);\ndefine('TC_BORDER_BOTTOMLEFT',\t2);\ndefine('TC_BORDER_BOTTOMRIGHT',\t3);\ndefine('TC_BORDER_HORILINE',\t4);\ndefine('TC_BORDER_VERTLINE',\t5);\n\nclass ScreenBorderHelper\n{\n\tprivate $ttype\t\t= 0;\n\t\n\tpublic function __construct($ttype)\n\t{\n\t\t$this->ttype\t= $ttype;\n\t}\n\t\n\tpublic function start()\n\t{\n\t\tif ($this->ttype == TELNET_TTYPE_XTERM)\n\t\t\treturn VT100_STYLE_RESET.VT100_USG0_LINE;\n\n\t\treturn '';\n\t}\n\t\n\tpublic function end()\n\t{\n\t\tif ($this->ttype == TELNET_TTYPE_XTERM)\n\t\t\treturn VT100_STYLE_RESET.VT100_USG0;\n\n\t\treturn '';\n\t}\n\t\n\tpublic function getChar($type)\n\t{\n\t\tswitch($type)\n\t\t{\n\t\t\tcase TC_BORDER_TOPLEFT :\n\t\t\t\tif ($this->ttype == TELNET_TTYPE_XTERM)\n\t\t\t\t\treturn chr(108);\n\t\t\t\telse if ($this->ttype == TELNET_TTYPE_ANSI)\n\t\t\t\t\treturn chr(218);\n\t\t\t\telse\n\t\t\t\t\treturn '/';\n\n\t\t\tcase TC_BORDER_TOPRIGHT :\n\t\t\t\tif ($this->ttype == TELNET_TTYPE_XTERM)\n\t\t\t\t\treturn chr(107);\n\t\t\t\telse if ($this->ttype == TELNET_TTYPE_ANSI)\n\t\t\t\t\treturn chr(191);\n\t\t\t\telse\n\t\t\t\t\treturn '\\\\';\n\n\t\t\tcase TC_BORDER_BOTTOMLEFT :\n\t\t\t\tif ($this->ttype == TELNET_TTYPE_XTERM)\n\t\t\t\t\treturn chr(109);\n\t\t\t\telse if ($this->ttype == TELNET_TTYPE_ANSI)\n\t\t\t\t\treturn chr(192);\n\t\t\t\telse\n\t\t\t\t\treturn '\\\\';\n\n\t\t\tcase TC_BORDER_BOTTOMRIGHT :\n\t\t\t\tif ($this->ttype == TELNET_TTYPE_XTERM)\n\t\t\t\t\treturn chr(106);\n\t\t\t\telse if ($this->ttype == TELNET_TTYPE_ANSI)\n\t\t\t\t\treturn chr(217);\n\t\t\t\telse\n\t\t\t\t\treturn '/';\n\n\t\t\tcase TC_BORDER_HORILINE :\n\t\t\t\tif ($this->ttype == TELNET_TTYPE_XTERM)\n\t\t\t\t\treturn chr(113);\n\t\t\t\telse if ($this->ttype == TELNET_TTYPE_ANSI)\n\t\t\t\t\treturn chr(196);\n\t\t\t\telse\n\t\t\t\t\treturn '-';\n\n\t\t\tcase TC_BORDER_VERTLINE :\n\t\t\t\tif ($this->ttype == TELNET_TTYPE_XTERM)\n\t\t\t\t\treturn chr(120);\n\t\t\t\telse if ($this->ttype == TELNET_TTYPE_ANSI)\n\t\t\t\t\treturn chr(179);\n\t\t\t\telse\n\t\t\t\t\treturn '|';\n\t\t}\n\t\t\n\t\treturn '*';\n\t}\n}\n\n?>"]],"start1":0,"start2":0,"length1":0,"length2":23608}]],"length":23608}
