{"ts":1363207802727,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * PHPInSimMod - State Module\n * @package PRISM\n * @subpackage State\n * @subpackage Users\n * @subpackage Clients\n * @subpackage Players\n*/\n\nclass StateHandler extends PropertyMaster\n{\n\t// Intrinsic Handles\n\tprotected $handles = array\n\t(\n\t\t# State handles\n\t\tISP_ISI => 'onInSimInit',\t\t\t# To Do. (1)\n\t\tISP_VER => 'onVersion',\n\t\tISP_TINY => 'onTiny',\t\t\t\t# To Do. (3)\n\t\tISP_SMALL => 'onSmall',\t\t\t\t# To Do. (4)\n\t\tISP_STA => 'onStateChange',\n\t\tISP_CPP => 'onCameraPosisionChange',\n\t\tISP_ISM => 'onMultiPlayerStart',\n\t\tISP_RST => 'onRaceStart',\n\t\tISP_REO => 'onReorder',\n\t\tISP_NLP => 'onNodeLapPlayer',\n\t\tISP_MCI => 'onMultiCarInfo',\n\t\tISP_AXI => 'onAutoXInfo',\n\t\tISP_RIP => 'onReplayInformation',\n\t\t# Client handles\n\t\tISP_NCN => 'onClientPacket',\n\t\tISP_CNL => 'onClientPacket',\n\t\tISP_CPR => 'onClientPacket',\n\t\t# Player handles\n\t\tISP_NPL => 'onPlayerPacket',\n\t\tISP_PLP => 'onPlayerPacket',\n\t\tISP_PLL => 'onPlayerPacket',\n\t\tISP_FIN => 'onPlayerPacket',\n\t\tISP_RES => 'onPlayerPacket',\n\t\t# Client & Player handles\n\t\tISP_TOC => array(\n\t\t\t\t\t'onClientPacket',\n\t\t\t\t\t'onPlayerPacket'\n\t\t\t\t),\n\t\t# Buttons handles\n\t\tISP_BFN => 'onButtonFunction',\n\t\tISP_BTC => 'onButtonClick',\n\t\tISP_BTT => 'onButtonText',\n\t);\n\n\tpublic function dispatchPacket(Struct $Packet)\n\t{\n\t\tif (isset($this->handles[$Packet->Type]))\n\t\t{\n\t\t\tif (is_array($this->handles[$Packet->Type]))\n\t\t\t{\n\t\t\t\tforeach ($this->handles[$Packet->Type] as $method)\n\t\t\t\t\t$this->$method($Packet);\n\t\t\t} else {\n\t\t\t\t$handle = $this->handles[$Packet->Type];\n\t\t\t\t$this->$handle($Packet);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Client handles\n\tpublic function onClientPacket(Struct $Packet)\n\t{\n\t\t# Check to make sure we want to handle this type of packet.\n\t\tif (!isset(ClientHandler::$handles[$Packet->Type]))\n\t\t\treturn;\n\n\t\tif ($Packet instanceof IS_NCN)\n\t\t\t$this->clients[$Packet->UCID] = new ClientHandler($Packet, $this);\n\t\telse\n\t\t{\n\t\t\t# Check to make sure we have a client.\n\t\t\tif (!isset($this->clients[$Packet->UCID]))\n\t\t\t\treturn;\n\n\t\t\t$this->clients[$Packet->UCID]->{ClientHandler::$handles[$Packet->Type]}($Packet);\n\t\t}\n\t}\n\n\t// Player handles\n\tpublic function onPlayerPacket(Struct $Packet)\n\t{\n\t\t# Check to make sure we want to handle this type of packet.\n\t\tif (!isset(PlayerHandler::$handles[$Packet->Type]))\n\t\t\treturn;\n\n\t\tif ($Packet instanceof IS_NPL)\n\t\t{\n\t\t\t# Check to see if we already have that player.\n\t\t\tif (isset($this->players[$Packet->PLID]))\n\t\t\t\treturn $this->players[$Packet->PLID]->onLeavingPits($Packet);\n\n\t\t\t$this->players[$Packet->PLID] = new PlayerHandler($Packet, $this);\n\t\t\t$this->clients[$Packet->UCID]->players[$Packet->PLID] = &$this->players[$Packet->PLID]; #Important, &= means that what ever I do in the PlayerHandler class is automaticly reflected within the ClientHandler class.\n\t\t}\n\t\telse\n\t\t{\n\t\t\t# Check to make sure we have that player.\n\t\t\tif (!isset($this->players[$Packet->PLID]))\n\t\t\t\treturn;\n\n\t\t\t$this->players[$Packet->PLID]->{PlayerHandler::$handles[$Packet->Type]}($Packet);\n\t\t}\n\t}\n\t\n\t// Button handles\n\t# IS_BFN\n\tpublic function onButtonFunction(IS_BFN $BFN)\n\t{\n\t\tif ($BFN->SubT == BFN_USER_CLEAR)\n\t\t{\n\t\t\t// forget about these buttons in the buttonmanager as they were removed on client side\n\t\t\tButtonManager::clearButtonsForConn($BFN->UCID);\n\t\t}\n\t}\n\tpublic function onButtonClick(IS_BTC $BTC)\n\t{\n\t\tButtonManager::onButtonClick($BTC);\n\t}\n\tpublic function onButtonText(IS_BTT $BTT)\n\t{\n\t\tButtonManager::onButtonText($BTT);\n\t}\n\n\n\t// Extrinsic Properties\n\tpublic $clients = array();\n\tpublic $players = array();\t\t# By design there is one here and a refrence to this in the $this->clients[UCID]->players[PLID] array.\n\n\t// Constructor\n\tpublic function __construct()\n\t{\n\t\tglobal $PRISM;\n\t\t# Send out some info requests\n\t\t$ISP = IS_TINY()->ReqI(1);\n\t\t// Request every bit of information we can get.\n\t\t// This becomes our baseline that we use and update as needed.\n\t\t# Get the most about of information as fast as we can.\n\t\t$ISP->SubT(TINY_ISM)->Send();\t# Get Multiplayer Info (ISP_ISM)\n\t\t# Get information on the clients & players, and their current race state.\n\t\t# These are redundant because of the above request for an ISM packet.\n\t\t# They must remain in order to avoid an error state in some plugins.\n\t\t$ISP->SubT(TINY_SST)->Send();\t# Send STate info (ISP_STA)\n\t\t$ISP->SubT(TINY_NCN)->Send();\t# get all connections (ISP_NCN)\n\t\t$ISP->SubT(TINY_NPL)->Send();\t# get all players (ISP_NPL)\n\t\t$ISP->SubT(TINY_RES)->Send();\t# get all results (ISP_RES)\n\t\t# Get information on everything else about the state.\n\t\t$ISP->SubT(TINY_GTH)->Send();\t# Get Time in Hundredths (SMALL_RTP)\n\t\t$ISP->SubT(TINY_SCP)->Send();\t# Send Camera Pos (ISP_CPP)\n\t\t$ISP->SubT(TINY_REO)->Send();\t# send an IS_REO (ISP_REO)\n\t\t$ISP->SubT(TINY_RST)->Send();\t# send an IS_RST (ISP_RST)\n\t\t$ISP->SubT(TINY_AXI)->Send();\t# send an IS_AXI - AutoX Info (ISP_AXI)\n\n\t\tif (!$PRISM->hosts->getHostById()->isRelay())\n\t\t{\n\t\t\t$ISP->SubT(TINY_NLP)->Send();\t# send an IS_NLP (ISP_NLP)\n\t\t\t$ISP->SubT(TINY_MCI)->Send();\t# send an IS_MCI (ISP_MCI)\n\t\t\t$ISP->SubT(TINY_RIP)->Send();\t# send an IS_RIP - Replay Information Packet (ISP_RIP)\n\t\t}\n\t}\n\n\t// Intrinsic Properties & Handlers\n\tpublic function packetHandler(Struct $Packet)\n\t{\n\t\t$handler &= $this->handles[$Packet->Type];\n\t\tif (isset($handler))\n\t\t\t$handler($Packet);\n\n\t\treturn FALSE;\n\t}\n\n\t# IS_ISI (1)\n\tpublic function onInSimInit(IS_ISI $ISI)\n\t{\n\t\t// To Do.\n\t}\n\n\t# IS_VER (2)\n\tprotected $Version;\t\t\t# LFS version, e.g. 0.3G\n\tprotected $Product;\t\t\t# Product : DEMO or S1\n\tprotected $InSimVer;\t\t# InSim Version : increased when InSim packets change\n\tpublic function onVersion(IS_VER $VER)\n\t{\n\t\t$this->Version = $VER->Version;\n\t\t$this->Product = $VER->Product;\n\t\t$this->InSimVer = $VER->InSimVer;\n\t}\n\n\t# IS_TINY (3)\n\tpublic function onTiny(IS_TINY $TINY)\n\t{\n\t\t// To Do.\n\t}\n\t\n\t# IS_SMALL (4)\n\tpublic function onSmall(IS_SMALL $SMALL)\n\t{\n\t\t// To Do.\n\t}\n\n\t# IS_STA (5)\n\tprotected $ReplaySpeed;\t\t# 1.0 is normal speed\n\t/** This was renamed from Flags to State as to not conflict with other Flags */\n\tprotected $State;\t\t\t# ISS state flags\n\tprotected $InGameCam;\t\t# Which type of camera is selected (see below)\n\tprotected $ViewPLID;\t\t# Unique ID of viewed player (0 = none)\n\tprotected $NumP;\t\t\t# Number of players in race\n\tprotected $NumConns;\t\t# Number of connections including host\n\tprotected $NumFinished;\t\t# Number finished or qualified\n\tprotected $RaceInProg;\t\t# 0 - No race / 1 - Race / 2 - Qualifying\n\tprotected $QualMins;\n\tprotected $RaceLaps;\n\tprotected $Track;\t\t\t# Short name for track e.g. FE2R\n\tprotected $Weather;\t\t\t# 0, 1 or 2.\n\tprotected $Wind;\t\t\t# 0 = Off 1 = Weak 2 = Strong\n\tpublic function onStateChange(IS_STA $STA)\n\t{\n\t\t$this->ReplaySpeed = $STA->ReplaySpeed;\n\t\t$this->State = $STA->Flags;\n\t\t$this->InGameCam = $STA->InGameCam;\n\t\t$this->ViewPLID = $STA->ViewPLID;\n\t\t$this->NumP = $STA->NumP;\n\t\t$this->NumConns = $STA->NumConns;\n\t\t$this->NumFinished = $STA->NumFinished;\n\t\t$this->RaceInProg = $STA->RaceInProg;\n\t\t$this->QualMins = $STA->QualMins;\n\t\t$this->RaceLaps = $STA->RaceLaps;\n\t\t$this->Track = $STA->Track;\n\t\t$this->Weather = $STA->Weather;\n\t\t$this->Wind = $STA->Wind;\n\t}\n\n\t# IS_CPP (9)\n\tprotected $Pos;\t\t\t# Position vector\n\tprotected $Heading;\t\t\t# heading - 0 points along Y axis\n\tprotected $Pitch;\t\t\t# pitch   - 0 means looking at horizon\n\tprotected $Roll;\t\t\t# roll    - 0 means no roll\n\tprotected $FOV;\t\t\t# FOV in degrees\n\tprotected $Time;\t\t\t# Time to get there (0 means instant + reset)\n\tpublic function onCameraPosisionChange(IS_CPP $CPP)\n\t{\n\t\t$this->Pos = $CPP->Pos;\n\t\t$this->Heading = $CPP->H;\n\t\t$this->Pitch = $CPP->P;\n\t\t$this->Roll = $CPP->R;\n\t\t$this->ViewPLID = $CPP->ViewPLID;\n\t\t$this->InGameCam = $CPP->InGameCam;\n\t\t$this->FOV = $CPP->FOV;\n\t\t$this->Time = $CPP->Time;\n\t\t$this->CamState = $CPP->Flags;\n\t}\n\n\t# IS_ISM (10)\n\tpublic $Host;\t\t\t\t# 0 = guest / 1 = host\n\tpublic $HName;\t\t\t\t# The name of the host joined or started.\n\tpublic function onMultiPlayerStart(IS_ISM $ISM)\n\t{\n\t\t$this->Host = $ISM->Host;\n\t\t$this->HName = $ISM->HName;\n\n\t\t# Send out some info requests, to make sure we have all of the baseline information.\n\t\t$ISP = IS_TINY()->ReqI(1);\n\t\t$ISP->SubT(TINY_NCN)->Send();\t# get all connections (ISP_NCN)\n\t\t$ISP->SubT(TINY_NPL)->Send();\t# get all players (ISP_NPL)\n\t\t$ISP->SubT(TINY_RES)->Send();\t# get all results (ISP_RES)\n\n\t}\n\n\t# IS_RST (17)\n\tpublic $Flags;\t\t\t\t# race flags (must pit, can reset, etc)\n\tpublic $NumNodes;\t\t\t# total number of nodes in the path\n\tpublic $Finish;\t\t\t# node index - finish line\n\tpublic $Split1;\t\t\t# node index - split 1\n\tpublic $Split2;\t\t\t# node index - split 2\n\tpublic $Split3;\t\t\t# node index - split 3\n\tpublic function onRaceStart(IS_RST $RST)\n\t{\n\t\t$this->RaceLaps = $RST->RaceLaps;\n\t\t$this->QualMins = $RST->QualMins;\n\t\t$this->NumP = $RST->NumP;\n\t\t$this->Track = $RST->Track;\n\t\t$this->Weather = $RST->Weather;\n\t\t$this->Wind = $RST->Wind;\n\t\t$this->Flags = $RST->Flags;\n\t\t$this->NumNodes = $RST->NumNodes;\n\t\t$this->Finish = $RST->Finish;\n\t\t$this->Split1 = $RST->Split1;\n\t\t$this->Split2 = $RST->Split2;\n\t\t$this->Split3 = $RST->Split3;\n\t}\n\n\t# IS_REO (36)\n\tpublic function onReorder(IS_REO $REO)\n\t{\n\t\t$this->NumP = $REO->NumP;\n\t\t$this->PLID = $REO->PLID;\n\t}\n\n\t# IS_NLP (37)\n\tprotected $Info;\t\t# Car Info For Each Player.\n\tpublic function onNodeLapPlayer(IS_NLP $NLP)\n\t{\n\t\t$this->NumP = $NLP->NumP;\n\t\t$this->Info = $NLP->Info;\n\t}\n\n\t# IS_MCI (38)\n\tprotected $NumC;\t\t# Number of valid CompCar structs in this packet.\n\tpublic function onMultiCarInfo(IS_MCI $MCI)\n\t{\n\t\t$this->NumC = $MCI->NumC;\n\t\t$this->Info = $MCI->Info;\n\t}\n\n\t# IS_AXI (43)\n\tprotected $AXStart;\t\t# Autocross start position\n\tprotected $NumCP;\t\t# Number of checkpoints\n\tprotected $NumO;\t\t# Number of objects\n\tprotected $LName;\t\t# The name of the layout last loaded (if loaded locally)\n\tpublic function onAutoXInfo(IS_AXI $AXI)\n\t{\n\t\t$this->AXStart = $AXI->AXStart;\n\t\t$this->NumCP = $AXI->NumCP;\n\t\t$this->NumO = $AXI->NumO;\n\t\t$this->LName = $AXI->LName;\n\t}\n\n\t# IS_RIP (48)\n\tprotected $Error;\t\t# 0 or 1 = OK / other values are listed below\n\tprotected $MPR;\t\t# 0 = SPR / 1 = MPR\n\tprotected $Paused;\t\t# Request : pause on arrival / reply : paused state\n\tprotected $Options;\t\t# Various options - see below\n\tprotected $CTime;\t\t# (hundredths) request : destination / reply : position\n\tprotected $TTime;\t\t# (hundredths) request : zero / reply : replay length\n\tprotected $RName;\t\t# zero or replay name - last byte must be zero\n\tpublic function onReplayInformation(IS_RIP $RIP)\n\t{\n\t\t$this->Error = $RIP->Error;\n\t\t$this->MPR = $RIP->MPR;\n\t\t$this->Paused = $RIP->Paused;\n\t\t$this->Options = $RIP->Options;\n\t\t$this->CTime = $RIP->CTime;\n\t\t$this->TTime = $RIP->TTime;\n\t\t$this->RName = $RIP->RName;\n\t}\n}\n\nclass ClientHandler extends PropertyMaster\n{\n\tpublic static $handles = array\n\t(\n\t\tISP_NCN => '__construct',\t# 18\n\t\tISP_CNL => '__destruct',\t# 19\n\t\tISP_CPR => 'onRename',\t\t# 20\n\t\tISP_TOC => 'onTakeOverCar'\t# 31\n\t);\n\tpublic $players = array();\n\n\tpublic function dispatchPacket(Struct $Packet)\n\t{\n\t\tif (isset($this->handles[$Packet->Type]))\n\t\t{\n\t\t\t$handle = $this->handles[$Packet->Type];\n\t\t\t$this->$handle($Packet);\n\t\t}\n\t}\n\n\t// Baiscly the IS_NCN Struct.\n\tprotected $UCID;\t\t\t# Connection's Unique ID (0 = Host)\n\tprotected $UName;\t\t\t# UserName\n\tprotected $PName;\t\t\t# PlayerName\n\tprotected $Admin;\t\t\t# TRUE If Client is Admin.\n\tprotected $Total;\t\t\t# Number of Connections Including Host\n\tprotected $Flags;\t\t\t# 2 If Client is Remote\n\n\t// Construct\n\tpublic function __construct(IS_NCN $NCN, StateHandler $parent)\n\t{\n\t\t$this->parent = $parent;\n\t\n\t\t$this->UCID = $NCN->UCID; # Where this is 0, client should be given the ADMIN_SERVER permission level.\n\t\t$this->UName = $NCN->UName;\n\t\t$this->PName = $NCN->PName;\n\t\t$this->Admin = $NCN->Admin;\t# Where this is 1, client should be given the ADMIN_ADMIN permission level.\n\t\t$this->Total = $NCN->Total;\n\t\t$this->Flags = $NCN->Flags;\n\n\t\tglobal $PRISM;\n\t\tif ($this->UCID == 0)\n\t\t\t$PRISM->admins->addAccount('*'.$PRISM->hosts->getCurrentHost(), '', ADMIN_SERVER, $PRISM->hosts->getCurrentHost(), FALSE);\n\t\telse if ($this->Admin == TRUE)\n\t\t\t$PRISM->admins->addAccount($this->UName, '', ADMIN_ADMIN, $PRISM->hosts->getCurrentHost(), FALSE);\n\t\t\n\t\t$this->PRISM = ($PRISM->admins->adminExists($NCN->UName)) ? $PRISM->admins->getAdminInfo($NCN->UName) : FALSE;\n\t}\n\n\tpublic function __destruct()\n\t{\n\t\tunset($this);\n\t}\n\n\tpublic function onRename(IS_CPR $CPR)\n\t{\n\t\t$this->PName = $CPR->PName;\n\t\t$this->Plate = $CPR->Plate;\n\t}\n\n\tpublic function onTakeOverCar(IS_TOC $TOC)\n\t{\n\t\t# Makes a copy of the orginal, and adds it to the new client.\n\t\t$this->parent->clients[$TOC->NewUCID]->players[$TOC->PLID] &= $this->parent->players[$TOC->PLID];\n\t\t# Removes the copy from this class, but should not garbage collect it, because it's copyied in the new class.\n\t\tunset($this->players[$TOC->PLID]);\n\t}\n\t\n\t// Is\n\tpublic function isAdmin(){ return ($this->isLFSAdmin() || $this->isPRISMAdmin) ? TRUE : FALSE; }\n\tpublic function isLFSAdmin(){ return ($this->UCID == 0 || $this->Admin == 1) ? TRUE : FALSE; }\n\tpublic function isPRISMAdmin(){ return !!$this->PRISM; }\n\tpublic function isRemote(){ return ($this->Flags == 2) ? TRUE : FALSE; }\n\tpublic function getAccessFlags(){ return $this->PRISM['accessFlags']; }\n\tpublic function getConnection(){ return $this->PRISM['connection']; }\n\tpublic function isTemporary(){ return $this->PRISM['temporary']; }\n}\n\nclass PlayerHandler extends PropertyMaster\n{\n\tpublic static $handles = array(\n\t\tISP_NPL => '__construct',\t# 21\n\t\tISP_PLL => '__destruct',\t# 23\n\t\tISP_PLP => 'onPits',\t\t# 22\n\t\tISP_FIN => 'onFinished',\t# 34\n\t\tISP_RES => 'onResult',\t\t# 35\n\t\tISP_TOC => 'onTakeOverCar',\t# 31\n\t);\n\n\t// Basicly the IS_NPL Struct.\n\tprotected $UCID;\t\t\t# Connection's Unique ID\n\tprotected $PType;\t\t\t# Bit 0 : female / bit 1 : AI / bit 2 : remote\n\tprotected $Flags;\t\t\t# Player flags\n\tprotected $PName;\t\t\t# Nickname\n\tprotected $Plate;\t\t\t# Number plate - NO ZERO AT END!\n\tprotected $CName;\t\t\t# Car name\n\tprotected $SName;\t\t\t# Skin name - MAX_CAR_TEX_NAME\n\tprotected $Tyres;\t\t\t# Compounds\n\tprotected $HMass;\t\t\t# Added mass (kg)\n\tprotected $HTRes;\t\t\t# Intake restriction\n\tprotected $Model;\t\t\t# Driver model\n\tprotected $Pass;\t\t\t# Passengers byte\n\tprotected $SetF;\t\t\t# Setup flags (see below)\n\tprotected $NumP;\t\t\t# Number in race (same when leaving pits, 1 more if new)\n\t# Addon informaiton\n\tpublic $inPits;\t\t\t# For when a player is in our list, but not on track this is TRUE.\n\n\t// Constructor\n\tpublic function __construct(IS_NPL $NPL, StateHandler $parent)\n\t{\n\t\t$this->parent = $parent;\n\t\t$this->onNPL($NPL);\n\t}\n\n\tpublic function __destruct()\n\t{\n\t\tunset($this);\n\t}\n\n\tprivate function onNPL(IS_NPL $NPL)\n\t{\n\t\t$this->UCID = $NPL->UCID;\n\t\t$this->PType = $NPL->PType;\n\t\t$this->Flags = $NPL->Flags;\n\t\t$this->PName = $NPL->PName;\n\t\t$this->Plate = $NPL->Plate;\n\t\t$this->CName = $NPL->CName;\n\t\t$this->SName = $NPL->SName;\n\t\t$this->Tyres = $NPL->Tyres;\n\t\t$this->HMass = $NPL->H_Mass;\n\t\t$this->HTRes = $NPL->H_TRes;\n\t\t$this->Model = $NPL->Model;\n\t\t$this->Pass = $NPL->Pass;\n\t\t$this->SetF = $NPL->SetF;\n\t\t$this->NumP = $NPL->NumP;\n\t\t$this->inPits = FALSE;\n\t}\n\n\tpublic function onPits(IS_PLP $PLP)\n\t{\n\t\t$this->inPits = TRUE;\n\t}\n\t\n\t# Special case, handled within the parent class's onPlayerPacket method.\n\tpublic function onLeavingPits(IS_NPL $NPL)\n\t{\n\t\t$this->onNPL($NPL);\n\t}\n\n\tpublic function onTakeOverCar(IS_TOC $TOC)\n\t{\n\t\t$this->UCID = $TOC->NewUCID;\n\t\t$this->PName = $this->parent->clients[$TOC->NewUCID]->PName;\n\t}\n\n\tprotected $finished = FALSE;\n\tpublic function onFinished(IS_FIN $FIN)\n\t{\n\t\t$this->finished = TRUE;\n\t}\n\t\n\tprotected $result = array();\n\tpublic function onResult(IS_RES $RES)\n\t{\n\t\t$this->result[] = $RES;\n\t}\n\n\t// Logic\n\tpublic function isFemale(){ return ($this->PType & 1) ? TRUE : FALSE; }\n\tpublic function isAI(){ return ($this->PType & 2) ? TRUE : FALSE; }\n\tpublic function isRemote(){ return ($this->PType & 4) ? TRUE : FALSE; }\n\tpublic function &isInPits(){ return $this->inPits; }\n}\n\n\n/**\n * Property Master allows for us the retreive read only properties on our classes.\n*/\nabstract class PropertyMaster\n{\n\tpublic function __get($property)\n\t{\n\t\treturn (isset($this->$property)) ? $this->$property : $return = NULL;\n\t}\n}\n\n?>\n"]],"start1":0,"start2":0,"length1":0,"length2":16038}]],"length":16038}
{"contributors":[],"silentsave":true,"ts":1363210761827,"patch":[[{"diffs":[[0,"}\n}\n"],[-1,"\n?>\n"]],"start1":16030,"start2":16030,"length1":8,"length2":4}]],"length":16034,"saved":false}
{"ts":1363210842878,"patch":[[{"diffs":[[0,"ers\n*/\n\n"],[1,"\n"],[0,"class St"]],"start1":142,"start2":142,"length1":16,"length2":17}]],"length":16035,"saved":false}
{"ts":1363210844454,"patch":[[{"diffs":[[0,"ers\n*/\n\n"],[1,"name\n"],[0,"\nclass S"]],"start1":142,"start2":142,"length1":16,"length2":21}]],"length":16040,"saved":false}
{"ts":1363210846088,"patch":[[{"diffs":[[0,"*/\n\nname"],[1,"space "],[0,"\n\nclass "]],"start1":146,"start2":146,"length1":16,"length2":22}]],"length":16046,"saved":false}
{"ts":1363210848297,"patch":[[{"diffs":[[0,"mespace "],[1,"PR"],[0,"\n\nclass "]],"start1":152,"start2":152,"length1":16,"length2":18}]],"length":16048,"saved":false}
{"ts":1363210850695,"patch":[[{"diffs":[[0,"space PR"],[1,"ISM"],[0,"\n\nclass "]],"start1":154,"start2":154,"length1":16,"length2":19}]],"length":16051,"saved":false}
{"ts":1363210853061,"patch":[[{"diffs":[[0,"ce PRISM"],[1,"\\Module''"],[0,"\n\nclass "]],"start1":157,"start2":157,"length1":16,"length2":25}]],"length":16060,"saved":false}
{"ts":1363210854951,"patch":[[{"diffs":[[0,"M\\Module"],[-1,"''"],[1,";"],[0,"\n\nclass "]],"start1":164,"start2":164,"length1":18,"length2":17}]],"length":16059,"saved":false}
{"contributors":[],"silentsave":true,"ts":1363317371712,"patch":[[{"diffs":[[0,"ket->Type]))"],[-1,"\n\t\t"],[1," "],[0,"{\n\t\t\tif (is_"]],"start1":1311,"start2":1311,"length1":27,"length2":25}]],"length":16057,"saved":false}
{"ts":1363317374780,"patch":[[{"diffs":[[0,">Type]))"],[-1,"\n\t\t\t"],[1," "],[0,"{\n\t\t\t\tfo"]],"start1":1365,"start2":1365,"length1":20,"length2":17}]],"length":16054,"saved":false}
{"ts":1363317378880,"patch":[[{"diffs":[[0,"$method)"],[1," {"],[0,"\n\t\t\t\t\t$t"]],"start1":1422,"start2":1422,"length1":16,"length2":18}]],"length":16056,"saved":false}
{"ts":1363317380256,"patch":[[{"diffs":[[0,"d($Packet);\n"],[1,"\t\t\t\t}\n"],[0,"\t\t\t} else {\n"]],"start1":1451,"start2":1451,"length1":24,"length2":30}]],"length":16062,"saved":false}
{"ts":1363317400717,"patch":[[{"diffs":[[0,"\t}\n\t\t\t} "],[-1,"else"],[0," {\n\t\t\t\t$"]],"start1":1466,"start2":1466,"length1":20,"length2":16}]],"length":16058,"saved":false}
{"ts":1363317402173,"patch":[[{"diffs":[[0,"\t}\n\t\t\t} "],[1,"else"],[0," {\n\t\t\t\t$"]],"start1":1466,"start2":1466,"length1":16,"length2":20}]],"length":16062,"saved":false}
{"ts":1363317407015,"patch":[[{"diffs":[[0,"$Packet->Type]))"],[1," {"],[0,"\n\t\t\treturn;\n\n\t\ti"]],"start1":1737,"start2":1737,"length1":32,"length2":34},{"diffs":[[0,"])) {\n\t\t\treturn;"],[1,"\n            "],[0,"\n\n\t\tif ($Packet "]],"start1":1750,"start2":1750,"length1":32,"length2":45}]],"length":16077,"saved":false}
{"ts":1363317408478,"patch":[[{"diffs":[[0,"rn;\n"],[-1,"            "],[1,"\t\t}"],[0,"\n\n\t\t"]],"start1":1763,"start2":1763,"length1":20,"length2":11}]],"length":16068,"saved":false}
{"ts":1363317411398,"patch":[[{"diffs":[[0," IS_NCN)"],[1," {"],[0,"\n\t\t\t$thi"]],"start1":1796,"start2":1796,"length1":16,"length2":18}]],"length":16070,"saved":false}
{"ts":1363317415064,"patch":[[{"diffs":[[0,", $this);\n\t\t"],[1,"} "],[0,"else\n\t\t{\n\t\t\t"]],"start1":1867,"start2":1867,"length1":24,"length2":26}]],"length":16072,"saved":false}
{"ts":1363317418116,"patch":[[{"diffs":[[0,"s);\n\t\t} else"],[-1,"\n\t\t"],[1," "],[0,"{\n\t\t\t# Check"]],"start1":1873,"start2":1873,"length1":27,"length2":25}]],"length":16070,"saved":false}
{"ts":1363317421390,"patch":[[{"diffs":[[0,"ket->UCID]))"],[1," {"],[0,"\n\t\t\t\treturn;"]],"start1":1963,"start2":1963,"length1":24,"length2":26},{"diffs":[[0,")) {\n\t\t\t\treturn;"],[1,"\n                "],[0,"\n\n\t\t\t$this->clie"]],"start1":1973,"start2":1973,"length1":32,"length2":49}]],"length":16089,"saved":false}
{"ts":1363317423529,"patch":[[{"diffs":[[0,"rn;\n"],[-1,"                "],[1,"\t\t\t}"],[0,"\n\n\t\t"]],"start1":1986,"start2":1986,"length1":24,"length2":12}]],"length":16077,"saved":false}
{"ts":1363317429390,"patch":[[{"diffs":[[0,">Type]))"],[1," {"],[0,"\n\t\t\tretu"]],"start1":2266,"start2":2266,"length1":16,"length2":18}]],"length":16079,"saved":false}
{"ts":1363317430777,"patch":[[{"diffs":[[0,"{\n\t\t\treturn;"],[1,"\n\t\t}"],[0,"\n\n\t\tif ($Pac"]],"start1":2275,"start2":2275,"length1":24,"length2":28}]],"length":16083,"saved":false}
{"ts":1363317435431,"patch":[[{"diffs":[[0," IS_NPL)"],[-1,"\n\t\t"],[1," "],[0,"{\n\t\t\t# C"]],"start1":2317,"start2":2317,"length1":19,"length2":17}]],"length":16081,"saved":false}
{"ts":1363317438332,"patch":[[{"diffs":[[0,"$Packet->PLID]))"],[1," {"],[0,"\n\t\t\t\treturn $thi"]],"start1":2406,"start2":2406,"length1":32,"length2":34}]],"length":16083,"saved":false}
{"ts":1363317441283,"patch":[[{"diffs":[[0,"ts($Packet);"],[1,"\n\t\t\t}"],[0,"\n\n\t\t\t$this->"]],"start1":2478,"start2":2478,"length1":24,"length2":29}]],"length":16088,"saved":false}
{"ts":1363317447454,"patch":[[{"diffs":[[0,"ass.\n\t\t}"],[-1,"\n\t\t"],[1," "],[0,"else\n\t\t{"]],"start1":2778,"start2":2778,"length1":19,"length2":17}]],"length":16086,"saved":false}
{"ts":1363317449859,"patch":[[{"diffs":[[0,"\n\t\t} els"],[-1,"e\n\t\t"],[0,"{\n\t\t\t# C"]],"start1":2782,"start2":2782,"length1":20,"length2":16}]],"length":16082,"saved":false}
{"ts":1363317451522,"patch":[[{"diffs":[[0,"\n\t\t} els"],[1,"e "],[0,"{\n\t\t\t# C"]],"start1":2782,"start2":2782,"length1":16,"length2":18}]],"length":16084,"saved":false}
{"ts":1363317454444,"patch":[[{"diffs":[[0,">PLID]))"],[1," {"],[0,"\n\t\t\t\tret"]],"start1":2876,"start2":2876,"length1":16,"length2":18}]],"length":16086,"saved":false}
{"ts":1363317455852,"patch":[[{"diffs":[[0,"\treturn;"],[1,"\n\t\t\t}"],[0,"\n\n\t\t\t$th"]],"start1":2890,"start2":2890,"length1":16,"length2":21}]],"length":16091,"saved":false}
{"ts":1363317465473,"patch":[[{"diffs":[[0,"R_CLEAR)"],[-1,"\n\t\t"],[0,"{\n\t\t\t// "]],"start1":3105,"start2":3105,"length1":19,"length2":16}]],"length":16088,"saved":false}
{"ts":1363317467091,"patch":[[{"diffs":[[0,"R_CLEAR)"],[1," "],[0,"{\n\t\t\t// "]],"start1":3105,"start2":3105,"length1":16,"length2":17}]],"length":16089,"saved":false}
{"ts":1363317470135,"patch":[[{"diffs":[[0,"ID);\n\t\t}\n\t}\n"],[1,"    \n"],[0,"\tpublic func"]],"start1":3252,"start2":3252,"length1":24,"length2":29}]],"length":16094,"saved":false}
{"ts":1363317472281,"patch":[[{"diffs":[[0,"TC);\n\t}\n"],[1,"    \n"],[0,"\tpublic "]],"start1":3349,"start2":3349,"length1":16,"length2":21}]],"length":16099,"saved":false}
{"ts":1363317481287,"patch":[[{"diffs":[[0,"Relay())"],[-1,"\n\t\t"],[1," "],[0,"{\n\t\t\t$IS"]],"start1":4879,"start2":4879,"length1":19,"length2":17}]],"length":16097,"saved":false}
{"ts":1363317486731,"patch":[[{"diffs":[[0,"andler))"],[1," {"],[0,"\n\t\t\t$han"]],"start1":5251,"start2":5251,"length1":16,"length2":18}]],"length":16099,"saved":false}
{"ts":1363317488049,"patch":[[{"diffs":[[0,"Packet);"],[1,"\n\t\t}"],[0,"\n\n\t\tretu"]],"start1":5275,"start2":5275,"length1":16,"length2":20}]],"length":16103,"saved":false}
{"ts":1363317491529,"patch":[[{"diffs":[[0,"\treturn "],[-1,"FALSE"],[1,"false"],[0,";\n\t}\n\n\t#"]],"start1":5290,"start2":5290,"length1":21,"length2":21}]],"length":16103,"saved":false}
{"ts":1363317524304,"patch":[[{"diffs":[[0,">Type]))"],[-1,"\n\t\t"],[0,"{\n\t\t\t$ha"]],"start1":10964,"start2":10964,"length1":19,"length2":16}]],"length":16100,"saved":false}
{"ts":1363317525452,"patch":[[{"diffs":[[0,">Type]))"],[1," "],[0,"{\n\t\t\t$ha"]],"start1":10964,"start2":10964,"length1":16,"length2":17}]],"length":16101,"saved":false}
{"ts":1363317534425,"patch":[[{"diffs":[[0,"ID == 0)"],[1," {"],[0,"\n\t\t\t$PRI"]],"start1":11836,"start2":11836,"length1":16,"length2":18}]],"length":16103,"saved":false}
{"ts":1363317536146,"patch":[[{"diffs":[[0,"$PRISM;\n"],[1,"        \n"],[0,"\t\tif ($t"]],"start1":11813,"start2":11813,"length1":16,"length2":25}]],"length":16112,"saved":false}
{"ts":1363317541194,"patch":[[{"diffs":[[0,"LSE);\n\t\t"],[1,"} "],[0,"else if "]],"start1":11976,"start2":11976,"length1":16,"length2":18}]],"length":16114,"saved":false}
{"ts":1363317543620,"patch":[[{"diffs":[[0,"== TRUE)"],[1," "],[0,"\n\t\t\t$PRI"]],"start1":12008,"start2":12008,"length1":16,"length2":17}]],"length":16115,"saved":false}
{"ts":1363317545960,"patch":[[{"diffs":[[0,"= TRUE) "],[1,"{"],[0,"\n\t\t\t$PRI"]],"start1":12009,"start2":12009,"length1":16,"length2":17}]],"length":16116,"saved":false}
{"ts":1363317550167,"patch":[[{"diffs":[[0,"dmin == "],[-1,"TRUE"],[1,"true"],[0,") {\n\t\t\t$"]],"start1":12003,"start2":12003,"length1":20,"length2":20}]],"length":16116,"saved":false}
{"ts":1363317553351,"patch":[[{"diffs":[[0,"rentHost(), "],[-1,"FALSE"],[1,"false"],[0,");\n\t\t\n\t\t$thi"]],"start1":12101,"start2":12101,"length1":29,"length2":29}]],"length":16116,"saved":false}
{"ts":1363317558958,"patch":[[{"diffs":[[0,"Name) : "],[-1,"FALSE"],[1,"false"],[0,";\n\t}\n\n\tp"]],"start1":12222,"start2":12222,"length1":21,"length2":21}]],"length":16116,"saved":false}
{"ts":1363317563066,"patch":[[{"diffs":[[0,"Host(), "],[-1,"FALSE"],[1,"false"],[0,");\n\t\t} e"]],"start1":11966,"start2":11966,"length1":21,"length2":21}]],"length":16116,"saved":false}
{"ts":1363317566840,"patch":[[{"diffs":[[0,"false);\n"],[1,"\t\t}\n"],[0,"\t\t\n\t\t$th"]],"start1":12113,"start2":12113,"length1":16,"length2":20}]],"length":16120,"saved":false}
{"ts":1363317593490,"patch":[[{"diffs":[[0,"yers\n*/\n"],[1,"#"],[0,"\nnamespa"]],"start1":141,"start2":141,"length1":16,"length2":17}]],"length":16121,"saved":false}
{"ts":1363317595248,"patch":[[{"diffs":[[0,"ers\n*/\n#"],[1," A"],[0,"\nnamespa"]],"start1":142,"start2":142,"length1":16,"length2":18}]],"length":16123,"saved":false}
{"ts":1363317597458,"patch":[[{"diffs":[[0,"s\n*/\n# A"],[1,"lmost PSR"],[0,"\nnamespa"]],"start1":144,"start2":144,"length1":16,"length2":25}]],"length":16132,"saved":false}
