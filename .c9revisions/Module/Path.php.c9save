{"ts":1363140531509,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * PHPInSimMod - PTH Module\n * @package PRISM\n * @subpackage PTH\n*/\nrequire_once(ROOTPATH . '/modules/prism_geometry.php');\n// PaTH\nclass PTH\n{\n\tconst PACK = 'a6CCll';\n\tconst UNPACK = 'a6LFSPTH/CVersion/CRevision/VNumNodes/VFinishLine';\n\n\tpublic $LFSPTH = 'LFSPTH';\n\tpublic $Version = 0;\n\tpublic $Revision = 0;\n\tpublic $NumNodes;\n\tpublic $FinishLine;\n\tpublic $Nodes = array();\n\tpublic $polyRoad = array();\n\tpublic $polyLimit = array();\n\n\tpublic function __construct($pthFilePath)\n\t{\n\t\t$file = file_get_contents($pthFilePath);\n\n\t\tif ($this->unPack($file) === TRUE)\n\t\t\treturn; # trigger_error returns (bool) TRUE, so if the return is true, there was an error.\n\n\t\treturn $this;\n\t}\n\tpublic function __destruct()\n\t{\n\t\tarray_splice($this->Nodes, 0, $this->NumNodes);\n\t\tarray_splice($this->polyRoad, 0, $this->NumNodes);\n\t\tarray_splice($this->polyLimit, 0, $this->NumNodes);\n\t}\n\tpublic function unPack($file)\n\t{\n\t\tif (substr($file, 0, 6) != $this->LFSPTH)\n\t\t\treturn trigger_error('Not a LFS PTH file', E_USER_ERROR);\n\n\t\tif (substr($file, 6, 1) != $this->Version)\n\t\t\treturn trigger_error('Not a LFS PTH Version Is Different Than PTH Parser', E_USER_ERROR);\n\n\t\tif (substr($file, 7, 1) != $this->Revision)\n\t\t\treturn trigger_error('Not a LFS PTH Revision Is Different Than PTH Parser', E_USER_ERROR);\n\n\t\tforeach (unpack(self::UNPACK, substr($file, 0, 16)) as $property => $value)\n\t\t\t$this->$property = $value;\n\n\t\tfor ($Node = 0; $Node < $this->NumNodes; $Node++)\n\t\t\t$this->Nodes[] = new Node(substr($file, 16 + ($Node * 40), 40));\n\n\t\t$this->toPoly($this->polyRoad, 'Road');\n\t\t$this->toPoly($this->polyLimit, 'Limit');\n\n\t\treturn $this;\n\t}\n\tpublic function toPoly(array &$nodePolys, $limitRoad)\n\t{\n\t\tarray_splice($nodePolys, 0, count($nodePolys));\n\n\t\tforEach ($this->Nodes as $i => $Nodes)\n\t\t{\n\t\t\tif ($i == 0)\n\t\t\t{\n\t\t\t\t$pa = new Point2D($Nodes->Direction->Y * $Nodes->$limitRoad->Left + $Nodes->Center->X,\n\t\t\t\t\t\t\t\t -$Nodes->Direction->X * $Nodes->$limitRoad->Left + $Nodes->Center->Y);\n\t\t\t\t$pb = new Point2D($Nodes->Direction->Y * $Nodes->$limitRoad->Right + $Nodes->Center->X,\n\t\t\t\t\t\t\t\t -$Nodes->Direction->X * $Nodes->$limitRoad->Right + $Nodes->Center->Y);\n\t\t\t}\n\n\t\t\t$pc = new Point2D($Nodes->Direction->Y * $Nodes->$limitRoad->Left + $Nodes->Center->X,\n\t\t\t\t\t\t\t -$Nodes->Direction->X * $Nodes->$limitRoad->Left + $Nodes->Center->Y);\n\t\t\t$pd = new Point2D($Nodes->Direction->Y * $Nodes->$limitRoad->Right + $Nodes->Center->X,\n\t\t\t\t\t\t\t -$Nodes->Direction->X * $Nodes->$limitRoad->Right + $Nodes->Center->Y);\n\n\t\t\t$nodePolys[] = new Polygon2D(array($pa, $pb, $pd, $pc));\n\n\t\t\t$pa = $pc;\n\t\t\t$pb = $pd;\n\t\t}\n\n\t\t// Close the path\n\t\t$nodePolys[] = new Polygon2D(array($pa, $pb, $nodePolys[0]->points[1], $nodePolys[0]->points[0]));\n\t}\n\tpublic function isOnRoad($x, $y, $NodeID)\n\t{\n\t\t$x /= 65536;\n\t\t$y /= 65536;\n\n\t\t// Check if point is within the left and right lines of the path\n\t\t$p1 = $this->polyRoad[$NodeID]->points[1];\n\t\t$p2 = $this->polyRoad[$NodeID]->points[2];\n\t\tif (($y - $p1->y) * ($p2->x - $p1->x) - ($x - $p1->x) * ($p2->y - $p1->y) < 0)\n\t\t\treturn false;\n\n\t\t$p1 = $this->polyRoad[$NodeID]->points[3];\n\t\t$p2 = $this->polyRoad[$NodeID]->points[0];\n\t\tif (($y - $p1->y) * ($p2->x - $p1->x) - ($x - $p1->x) * ($p2->y - $p1->y) < 0)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\tpublic function isOnLimit($x, $y, $NodeID)\n\t{\n\t\t$x /= 65536;\n\t\t$y /= 65536;\n\n\t\t// Check if point is within the left and right lines of the path\n\t\t$p1 = $this->polyLimit[$NodeID]->points[1];\n\t\t$p2 = $this->polyLimit[$NodeID]->points[2];\n\t\tif (($y - $p1->y) * ($p2->x - $p1->x) - ($x - $p1->x) * ($p2->y - $p1->y) < 0)\n\t\t\treturn false;\n\n\t\t$p1 = $this->polyLimit[$NodeID]->points[3];\n\t\t$p2 = $this->polyLimit[$NodeID]->points[0];\n\t\tif (($y - $p1->y) * ($p2->x - $p1->x) - ($x - $p1->x) * ($p2->y - $p1->y) < 0)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\tpublic function drawPath ($fileName)\n\t{\n\t\t$im = imagecreatetruecolor(2560, 2560);\n\t\t$bg = imagecolorallocate($im, 254, 254, 254);\n\t\timagefill($im, 0, 0, $bg);\n\t\timagecolortransparent($im, $bg);\n\n\t\t$p =& $this;\n\n\t\t$LeftCos = cos (90 * M_PI / 180);\n\t\t$LeftSin = sin (90 * M_PI / 180);\n\t\t$RightCos = cos (-90 * M_PI / 180);\n\t\t$RightSin = sin (-90 * M_PI / 180);\n\n\t\t$Node = end($p->Nodes); # Get's last node.\n\t\t$llx2 = ($Node->Direction->X * $LeftCos - (-$Node->Direction->Y) * $LeftSin) * $Node->Limit->Left + ($Node->Center->X + 1024);\n\t\t$lly2 = ((-$Node->Direction->Y) * $LeftCos + $Node->Direction->X * $LeftSin) * $Node->Limit->Left + ((-$Node->Center->Y) + 1024);\n\t\t$lrx2 = ($Node->Direction->X * $RightCos - (-$Node->Direction->Y) * $RightSin) * -$Node->Limit->Right + ($Node->Center->X + 1024);\n\t\t$lry2 = ((-$Node->Direction->Y) * $RightCos + $Node->Direction->X * $RightSin) * -$Node->Limit->Right + ((-$Node->Center->Y) + 1024);\n\n\t\t$dlx2 = ($Node->Direction->X * $LeftCos - (-$Node->Direction->Y) * $LeftSin) * $Node->Road->Left + ($Node->Center->X + 1024);\n\t\t$dly2 = ((-$Node->Direction->Y) * $LeftCos + $Node->Direction->X * $LeftSin) * $Node->Road->Left + ((-$Node->Center->Y) + 1024);\n\t\t$drx2 = ($Node->Direction->X * $RightCos - (-$Node->Direction->Y) * $RightSin) * -$Node->Road->Right + ($Node->Center->X + 1024);\n\t\t$dry2 = ((-$Node->Direction->Y) * $RightCos + $Node->Direction->X * $RightSin) * -$Node->Road->Right + ((-$Node->Center->Y) + 1024);\n\n\t\t$limit_col = imagecolorallocatealpha($im, 8, 128, 16, 64);\n\t\t$drive_col = imagecolorallocatealpha($im, 64, 64, 64, 64);\n\n\t\treset($p->Nodes);\t# Resets our pointer back to the start.\n\t\tforEach ($p->Nodes as $i => $Node)\n\t\t{\n\t\t\t// Limit\n\t\t\t$llx = ($Node->Direction->X * $LeftCos - (-$Node->Direction->Y) * $LeftSin) * $Node->Limit->Left + ($Node->Center->X + 1024);\n\t\t\t$lly = ((-$Node->Direction->Y) * $LeftCos + $Node->Direction->X * $LeftSin) * $Node->Limit->Left + ((-$Node->Center->Y) + 1024);\n\t\t\t$lrx = ($Node->Direction->X * $RightCos - (-$Node->Direction->Y) * $RightSin) * -$Node->Limit->Right + ($Node->Center->X + 1024);\n\t\t\t$lry = ((-$Node->Direction->Y) * $RightCos + $Node->Direction->X * $RightSin) * -$Node->Limit->Right + ((-$Node->Center->Y) + 1024);\n\n\t\t\t$l_array = array ($llx2, $lly2, $llx, $lly, $lrx, $lry, $lrx2, $lry2);\n\t\t\timagefilledpolygon($im, $l_array, 4, $limit_col);\n\n\t\t\t$llx2 = $llx;\n\t\t\t$lly2 = $lly;\n\t\t\t$lrx2 = $lrx;\n\t\t\t$lry2 = $lry;\n\n\t\t\t// Drive\n\t\t\t$dlx = ($Node->Direction->X * $LeftCos - (-$Node->Direction->Y) * $LeftSin) * $Node->Road->Left + ($Node->Center->X + 1024);\n\t\t\t$dly = ((-$Node->Direction->Y) * $LeftCos + $Node->Direction->X * $LeftSin) * $Node->Road->Left + ((-$Node->Center->Y) + 1024);\n\t\t\t$drx = ($Node->Direction->X * $RightCos - (-$Node->Direction->Y) * $RightSin) * -$Node->Road->Right + ($Node->Center->X + 1024);\n\t\t\t$dry = ((-$Node->Direction->Y) * $RightCos + $Node->Direction->X * $RightSin) * -$Node->Road->Right + ((-$Node->Center->Y) + 1024);\n\n\t\t\t$d_array = array ($dlx2, $dly2, $dlx, $dly, $drx, $dry, $drx2, $dry2);\n\t\t\timagefilledpolygon($im, $d_array, 4, $drive_col);\n\n\t\t\t$dlx2 = $dlx;\n\t\t\t$dly2 = $dly;\n\t\t\t$drx2 = $drx;\n\t\t\t$dry2 = $dry;\n\t\t}\n\n\t\timagepng($im, $fileName);\n\t\timagedestroy($im);\n\t}\n}\nclass Node\n{\n\tpublic $Center;\n\tpublic $Direction;\n\tpublic $Limit;\n\tpublic $Road;\n\n\tpublic function __construct($RawNode) {\n\t\t$this->Center = new Center(substr($RawNode, 0, 12));\n\t\t$this->Direction = new Direction(substr($RawNode, 12, 12));\n\t\t$this->Limit = new Limit(substr($RawNode, 24, 8));\n\t\t$this->Road = new Road(substr($RawNode, 32, 8));\n\t}\n}\nclass Center\n{\n\tconst PACK = 'lll';\n\tconst UNPACK = 'lX/lY/lZ';\n\n\tpublic function __construct($rawCenter) {\n\t\t$this->unPack($rawCenter);\n\t}\n\tpublic function unPack($rawCenter) {\n\t\tforeach (unpack($this::UNPACK, $rawCenter) as $property => $value)\n\t\t\t$this->$property = $value / 65536;\n\t}\n}\nclass Direction\n{\n\tconst PACK = 'fff';\n\tconst UNPACK = 'fX/fY/fZ';\n\n\tpublic function __construct($rawDirection) {\n\t\t$this->unPack($rawDirection);\n\t}\n\tpublic function unPack($rawDirection) {\n\t\tforeach (unpack($this::UNPACK, $rawDirection) as $property => $value)\n\t\t\t$this->$property = $value;\n\t}\n}\nclass Limit\n{\n\tconst PACK = 'ff';\n\tconst UNPACK = 'fLeft/fRight';\n\n\tpublic function __construct($rawLimit) {\n\t\t$this->unPack($rawLimit);\n\t}\n\tpublic function unPack($rawLimit) {\n\t\tforeach (unpack($this::UNPACK, $rawLimit) as $property => $value)\n\t\t\t$this->$property = $value;\n\t}\n}\nclass Road\n{\n\tconst PACK = 'ff';\n\tconst UNPACK = 'fLeft/fRight';\n\n\tpublic function __construct($rawRoad) {\n\t\t$this->unPack($rawRoad);\n\t}\n\tpublic function unPack($rawRoad) {\n\t\tforeach (unpack($this::UNPACK, $rawRoad) as $property => $value)\n\t\t\t$this->$property = $value;\n\t}\n}\n?>"]],"start1":0,"start2":0,"length1":0,"length2":8521}]],"length":8521}
{"contributors":[],"silentsave":true,"ts":1363202524621,"patch":[[{"diffs":[[0,"e PTH\n*/"],[1,"\n\nn"],[0,"\nrequire"]],"start1":69,"start2":69,"length1":16,"length2":19}]],"length":8524,"saved":false}
{"ts":1363202526084,"patch":[[{"diffs":[[0,"TH\n*/\n\nn"],[1,"ames"],[0,"\nrequire"]],"start1":72,"start2":72,"length1":16,"length2":20}]],"length":8528,"saved":false}
{"ts":1363202527511,"patch":[[{"diffs":[[0,"/\n\nnames"],[1,"pace "],[0,"\nrequire"]],"start1":76,"start2":76,"length1":16,"length2":21}]],"length":8533,"saved":false}
{"ts":1363202529585,"patch":[[{"diffs":[[0,"mespace "],[1,"PR"],[0,"\nrequire"]],"start1":81,"start2":81,"length1":16,"length2":18}]],"length":8535,"saved":false}
{"ts":1363202531017,"patch":[[{"diffs":[[0,"space PR"],[1,"IS"],[0,"\nrequire"]],"start1":83,"start2":83,"length1":16,"length2":18}]],"length":8537,"saved":false}
{"ts":1363202532428,"patch":[[{"diffs":[[0,"ace PRIS"],[1,"M\\M"],[0,"\nrequire"]],"start1":85,"start2":85,"length1":16,"length2":19}]],"length":8540,"saved":false}
{"ts":1363202533691,"patch":[[{"diffs":[[0," PRISM\\M"],[1,"otule"],[0,"\nrequire"]],"start1":88,"start2":88,"length1":16,"length2":21}]],"length":8545,"saved":false}
{"ts":1363202536056,"patch":[[{"diffs":[[0,"M\\Mo"],[-1,"tule"],[1,"d"],[0,"\nreq"]],"start1":93,"start2":93,"length1":12,"length2":9}]],"length":8542,"saved":false}
{"ts":1363202537519,"patch":[[{"diffs":[[0,"RISM\\Mod"],[1,"ule\\"],[0,"\nrequire"]],"start1":90,"start2":90,"length1":16,"length2":20}]],"length":8546,"saved":false}
{"ts":1363202539287,"patch":[[{"diffs":[[0,"\\Module\\"],[1,"PTH;"],[0,"\nrequire"]],"start1":94,"start2":94,"length1":16,"length2":20}]],"length":8550,"saved":false}
{"ts":1363202542787,"patch":[[{"diffs":[[0,"le\\PTH;\n"],[1,"\n\n"],[0,"require_"]],"start1":99,"start2":99,"length1":16,"length2":18}]],"length":8552,"saved":false}
{"ts":1363202545125,"patch":[[{"diffs":[[0,"e\\PTH;\n\n"],[1,"use"],[0,"\nrequire"]],"start1":100,"start2":100,"length1":16,"length2":19}]],"length":8555,"saved":false}
{"ts":1363202546445,"patch":[[{"diffs":[[0,"TH;\n\nuse"],[1," "],[0,"\nrequire"]],"start1":103,"start2":103,"length1":16,"length2":17}]],"length":8556,"saved":false}
{"ts":1363202548678,"patch":[[{"diffs":[[0,"H;\n\nuse "],[1,"PRISM\\M"],[0,"\nrequire"]],"start1":104,"start2":104,"length1":16,"length2":23}]],"length":8563,"saved":false}
{"ts":1363202550523,"patch":[[{"diffs":[[0," PRISM\\M"],[1,"odule"],[0,"\nrequire"]],"start1":111,"start2":111,"length1":16,"length2":21}]],"length":8568,"saved":false}
{"ts":1363202551829,"patch":[[{"diffs":[[0,"M\\Module"],[1,"\\"],[0,"\nrequire"]],"start1":116,"start2":116,"length1":16,"length2":17}]],"length":8569,"saved":false}
{"ts":1363202555083,"patch":[[{"diffs":[[0,"\\Module\\"],[1,"Geome"],[0,"\nrequire"]],"start1":117,"start2":117,"length1":16,"length2":21}]],"length":8574,"saved":false}
{"ts":1363202556698,"patch":[[{"diffs":[[0,"le\\Geome"],[1,"try"],[0,"\nrequire"]],"start1":122,"start2":122,"length1":16,"length2":19}]],"length":8577,"saved":false}
{"ts":1363202558084,"patch":[[{"diffs":[[0,"Geometry"],[1,"''"],[0,"\nrequire"]],"start1":125,"start2":125,"length1":16,"length2":18}]],"length":8579,"saved":false}
{"ts":1363202559667,"patch":[[{"diffs":[[0,"etry"],[-1,"''"],[1,";"],[0,"\nreq"]],"start1":129,"start2":129,"length1":10,"length2":9}]],"length":8578,"saved":false}
{"ts":1363202565937,"patch":[[{"diffs":[[0,"ometry;\n"],[1,"//"],[0,"require_"]],"start1":127,"start2":127,"length1":16,"length2":18}]],"length":8580,"saved":false}
{"ts":1363202570930,"patch":[[{"diffs":[[0,"\nclass P"],[-1,"TH"],[0,"\n{\n\tcons"]],"start1":200,"start2":200,"length1":18,"length2":16}]],"length":8578,"saved":false}
{"ts":1363202572820,"patch":[[{"diffs":[[0,"\nclass P"],[1,"ath"],[0,"\n{\n\tcons"]],"start1":200,"start2":200,"length1":16,"length2":19}]],"length":8581,"saved":false}
{"contributors":[],"silentsave":true,"ts":1363274030223,"patch":[[{"diffs":[[0,"');\n"],[1,"\n"],[0,"// PaTH"],[1," - Namespaces are for the purpose of avoiding naming conflicts. Yey"],[0,"\ncla"]],"start1":189,"start2":189,"length1":15,"length2":83},{"diffs":[[0,"($im);\n\t}\n}\n"],[1,"\n"],[0,"class Node\n{"]],"start1":7144,"start2":7144,"length1":24,"length2":25}]],"length":8650,"saved":false}
{"ts":1363274032421,"patch":[[{"diffs":[[0,", 8));\n\t}\n}\n"],[1,"\n"],[0,"class Center"]],"start1":7494,"start2":7494,"length1":24,"length2":25}]],"length":8651,"saved":false}
{"ts":1363274033793,"patch":[[{"diffs":[[0,"65536;\n\t}\n}\n"],[1,"\n"],[0,"class Direct"]],"start1":7785,"start2":7785,"length1":24,"length2":25}]],"length":8652,"saved":false}
{"ts":1363274035368,"patch":[[{"diffs":[[0,"value;\n\t}\n}\n"],[1,"\n"],[0,"class Limit\n"]],"start1":8083,"start2":8083,"length1":24,"length2":25}]],"length":8653,"saved":false}
{"ts":1363274037976,"patch":[[{"diffs":[[0,"e;\n\t}\n}\n"],[1,"\n"],[0,"class Ro"]],"start1":8368,"start2":8368,"length1":16,"length2":17}]],"length":8654,"saved":false}
{"ts":1363274041212,"patch":[[{"diffs":[[0,"}\n}\n"],[-1,"?>"]],"start1":8648,"start2":8648,"length1":6,"length2":4}]],"length":8652,"saved":false}
{"ts":1363313701242,"patch":[[{"diffs":[[0,"evision)"],[1," {"],[0,"\n\t\t\tretu"]],"start1":1343,"start2":1343,"length1":16,"length2":18}]],"length":8672,"saved":false}
{"ts":1363313706776,"patch":[[{"diffs":[[0,"_ERROR);"],[1,"\n\t\t}"],[0,"\n\n\t\tfore"]],"start1":1439,"start2":1439,"length1":16,"length2":20}]],"length":8676,"saved":false}
{"ts":1363313709892,"patch":[[{"diffs":[[0,"perty => $value)"],[1," /"],[0,"\n\t\t\t$this->$prop"]],"start1":1514,"start2":1514,"length1":32,"length2":34}]],"length":8678,"saved":false}
{"ts":1363313711448,"patch":[[{"diffs":[[0,"$value) "],[-1,"/"],[1,"{"],[0,"\n\t\t\t$thi"]],"start1":1523,"start2":1523,"length1":17,"length2":17}]],"length":8678,"saved":false}
{"ts":1363313714668,"patch":[[{"diffs":[[0," $value;"],[1,"\n\t\t}"],[0,"\n\n\t\tfor "]],"start1":1554,"start2":1554,"length1":16,"length2":20}]],"length":8682,"saved":false}
{"ts":1363313716687,"patch":[[{"diffs":[[0,"$Node++)"],[1," {"],[0,"\n\t\t\t$thi"]],"start1":1611,"start2":1611,"length1":16,"length2":18}]],"length":8684,"saved":false}
{"ts":1363313720267,"patch":[[{"diffs":[[0,"), 40));"],[1,"\n\t\t}"],[0,"\n\n\t\t$thi"]],"start1":1681,"start2":1681,"length1":16,"length2":20}]],"length":8688,"saved":false}
{"ts":1363313769484,"patch":[[{"diffs":[[0,"ys));\n\n\t\tfor"],[-1,"E"],[1,"e"],[0,"ach ($this->"]],"start1":1903,"start2":1903,"length1":25,"length2":25}]],"length":8688,"saved":false}
{"ts":1363313771907,"patch":[[{"diffs":[[0," $Nodes)"],[-1,"\n\t\t"],[0,"{\n\t\t\tif "]],"start1":1942,"start2":1942,"length1":19,"length2":16}]],"length":8685,"saved":false}
{"ts":1363313773024,"patch":[[{"diffs":[[0," $Nodes)"],[1," "],[0,"{\n\t\t\tif "]],"start1":1942,"start2":1942,"length1":16,"length2":17}]],"length":8686,"saved":false}
{"ts":1363313775818,"patch":[[{"diffs":[[0,"$i == 0)"],[-1,"\n\t\t\t"],[1," "],[0,"{\n\t\t\t\t$p"]],"start1":1960,"start2":1960,"length1":20,"length2":17}]],"length":8683,"saved":false}
{"ts":1363313787670,"patch":[[{"diffs":[[0,"ID]->points[2];\n"],[1,"        \n"],[0,"\t\tif (($y - $p1-"]],"start1":3098,"start2":3098,"length1":32,"length2":41}]],"length":8692,"saved":false}
{"ts":1363313790810,"patch":[[{"diffs":[[0,"y - $p1->y) < 0)"],[1," {"],[0,"\n\t\t\treturn false"]],"start1":3187,"start2":3187,"length1":32,"length2":34}]],"length":8694,"saved":false}
{"ts":1363313793210,"patch":[[{"diffs":[[0,"\t\t\treturn false;"],[1,"\n            "],[0,"\n\n\t\t$p1 = $this-"]],"start1":3206,"start2":3206,"length1":32,"length2":45}]],"length":8707,"saved":false}
{"ts":1363313794312,"patch":[[{"diffs":[[0,"se;\n"],[-1,"            "],[1,"\t\t}"],[0,"\n\n\t\t"]],"start1":3219,"start2":3219,"length1":20,"length2":11}]],"length":8698,"saved":false}
{"ts":1363313797951,"patch":[[{"diffs":[[0,"ID]->points[0];\n"],[1,"        \n"],[0,"\t\tif (($y - $p1-"]],"start1":3302,"start2":3302,"length1":32,"length2":41}]],"length":8707,"saved":false}
{"ts":1363313800502,"patch":[[{"diffs":[[0,"y - $p1->y) < 0)"],[1," {"],[0,"\n\t\t\treturn false"]],"start1":3391,"start2":3391,"length1":32,"length2":34}]],"length":8709,"saved":false}
{"ts":1363313802707,"patch":[[{"diffs":[[0,"\t\t\treturn false;"],[1,"\n\t\t}"],[0,"\n\n\t\treturn true;"]],"start1":3410,"start2":3410,"length1":32,"length2":36}]],"length":8713,"saved":false}
{"ts":1363313808707,"patch":[[{"diffs":[[0,"nts[2];\n"],[1,"        \n"],[0,"\t\tif (($"]],"start1":3679,"start2":3679,"length1":16,"length2":25}]],"length":8722,"saved":false}
{"ts":1363313812159,"patch":[[{"diffs":[[0,"y - $p1->y) < 0)"],[1," {"],[0,"\n\t\t\treturn false"]],"start1":3760,"start2":3760,"length1":32,"length2":34}]],"length":8724,"saved":false}
{"ts":1363313814070,"patch":[[{"diffs":[[0,"eturn false;"],[1,"\n\t\t}"],[0,"\n\n\t\t$p1 = $t"]],"start1":3783,"start2":3783,"length1":24,"length2":28}]],"length":8728,"saved":false}
{"ts":1363313817922,"patch":[[{"diffs":[[0,"nts[0];\n"],[1,"        \n"],[0,"\t\tif (($"]],"start1":3885,"start2":3885,"length1":16,"length2":25}]],"length":8737,"saved":false}
{"ts":1363313820590,"patch":[[{"diffs":[[0,">y) < 0)"],[1," {"],[0,"\n\t\t\tretu"]],"start1":3974,"start2":3974,"length1":16,"length2":18}]],"length":8739,"saved":false}
{"ts":1363313823034,"patch":[[{"diffs":[[0,"n false;"],[1,"\n\t\t}"],[0,"\n\n\t\tretu"]],"start1":3993,"start2":3993,"length1":16,"length2":20}]],"length":8743,"saved":false}
{"ts":1363313836735,"patch":[[{"diffs":[[0," start.\n"],[1,"        \n"],[0,"\t\tforEac"]],"start1":5664,"start2":5664,"length1":16,"length2":25}]],"length":8752,"saved":false}
{"ts":1363313840040,"patch":[[{"diffs":[[0,"\n\t\tf"],[-1,"orEach"],[0," ($p"]],"start1":5680,"start2":5680,"length1":14,"length2":8}]],"length":8746,"saved":false}
{"ts":1363313841765,"patch":[[{"diffs":[[0,"    \n\t\tf"],[1,"ou"],[0," ($p->No"]],"start1":5676,"start2":5676,"length1":16,"length2":18}]],"length":8748,"saved":false}
{"ts":1363313843550,"patch":[[{"diffs":[[0,"   \n\t\tfo"],[-1,"u"],[1,"rea"],[0," ($p->No"]],"start1":5677,"start2":5677,"length1":17,"length2":19}]],"length":8750,"saved":false}
{"ts":1363313845061,"patch":[[{"diffs":[[0,"\n\t\tforea"],[1,"ch"],[0," ($p->No"]],"start1":5680,"start2":5680,"length1":16,"length2":18}]],"length":8752,"saved":false}
{"ts":1363313871048,"patch":[[{"diffs":[[0,"Center);\n\t}\n"],[1,"    \n"],[0,"\tpublic func"]],"start1":7735,"start2":7735,"length1":24,"length2":29}]],"length":8757,"saved":false}
{"ts":1363313878318,"patch":[[{"diffs":[[0,"ection);\n\t}\n"],[1,"    \n"],[0,"\tpublic func"]],"start1":8040,"start2":8040,"length1":24,"length2":29}]],"length":8762,"saved":false}
{"ts":1363313886054,"patch":[[{"diffs":[[0,"wLimit);\n\t}\n"],[1,"    \n"],[0,"\tpublic func"]],"start1":8334,"start2":8334,"length1":24,"length2":29}]],"length":8767,"saved":false}
{"ts":1363313891037,"patch":[[{"diffs":[[0,"awRoad);\n\t}\n"],[1,"    \n"],[0,"\tpublic func"]],"start1":8617,"start2":8617,"length1":24,"length2":29}]],"length":8772,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363313979390,"patch":[[{"diffs":[[0," PTH\n*/\n"],[-1,""],[0,""],[1,"# Almost PSR"],[0,"\nnamespa"]],"start1":70,"start2":70,"length1":16,"length2":28},{"diffs":[[0,"=== "],[-1,"TRUE)"],[1,"true) {"],[0,"\n\t\t\t"]],"start1":704,"start2":704,"length1":13,"length2":15},{"diffs":[[0,"n error."],[1,"\n\t\t}"],[0,"\n\n\t\tretu"]],"start1":801,"start2":801,"length1":16,"length2":20},{"diffs":[[0,">LFSPTH)"],[-1,""],[0,""],[1," {"],[0,"\n\t\t\tretu"]],"start1":1096,"start2":1096,"length1":16,"length2":18},{"diffs":[[0,", E_USER_ERROR);"],[1,"\n\t\t}"],[0,"\n\n\t\tif (substr($"]],"start1":1151,"start2":1151,"length1":32,"length2":36},{"diffs":[[0,"Version)"],[1," {"],[0,"\n\t\t\tretu"]],"start1":1209,"start2":1209,"length1":16,"length2":18},{"diffs":[[0,"_ERROR);"],[1,"\n\t\t}"],[0,"\n\n\t\tif ("]],"start1":1304,"start2":1304,"length1":16,"length2":20}]],"length":8784,"saved":false}
