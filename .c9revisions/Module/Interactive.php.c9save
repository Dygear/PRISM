{"ts":1363202354113,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * PHPInSimMod - Interactive Module\n * @package PRISM\n * @subpackage Interactive\n*/\n\nclass Interactive\n{\n\tpublic static function queryHosts(array &$vars)\n\t{\n\t\techo '***HOST CONNECTIONS SETUP***'.PHP_EOL;\n\t\techo 'You now have the chance to manually enter the details of the host(s) you want to connect to.'.PHP_EOL;\n\t\techo 'Afterwards your connection settings will be stored in ./config/hosts.ini for future use.'.PHP_EOL;\n\n\t\t$c = 1;\n\t\twhile (true)\n\t\t{\n\t\t\techo PHP_EOL;\n\t\t\t$tmp = array();\n\t\t\t\n\t\t\t// Ask if we want to add a direct host or a relay host\n\t\t\t$tmp['useRelay'] = (self::query('Do you want to connect to a host directly or through the relay?', array('direct', 'relay')) == 'relay') ? 1 : 0;\n\t\n\t\t\tif ($tmp['useRelay'])\n\t\t\t{\n\t\t\t\t// Relay host connection details\n\t\t\t\t$tmp['hostname']\t\t= self::query('What is the name of the host (case-sensitive)?');\n\t\t\t\t$tmp['adminPass']\t\t= self::query('Optional administrator password (or blank)', array(), TRUE);\n\t\t\t\t$tmp['specPass']\t\t= '';\n\t\t\t\t\n\t\t\t\tif (!$tmp['adminPass'])\n\t\t\t\t\t$tmp['specPass']\t= self::query('Optional spectator pass then? (or blank)', array(), TRUE);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Direct host connection details\n\t\t\t\tdo {\n\t\t\t\t\tif (isset($tmp['ip']) && $tmp['ip'] != '')\n\t\t\t\t\t\techo 'Invalid ip or hostname.'.PHP_EOL;\n\t\t\t\t\t$tmp['ip']\t\t\t= self::query('What is the IP address or hostname of the host?');\n\t\t\t\t} while (!getIP($tmp['ip']));\n\t\n\t\t\t\tdo {\n\t\t\t\t\tif (isset($tmp['port']))\n\t\t\t\t\t\techo 'Invalid port number. Must be between 1 and 65535.'.PHP_EOL;\n\t\t\t\t\t$tmp['port']\t\t= (int) self::query('What is the InSim port number of the host?');\n\t\t\t\t} while ($tmp['port'] < 1 || $tmp['port'] > 65535);\n\t\n\t\t\t\t$tmp['socketType']\t\t= (self::query('Do you want to connect to the host via TCP or UDP?', array('tcp', 'udp')) == 'udp') ? 2 : 1;\n\t\t\t\t$tmp['password']\t\t= self::query('What is the administrator password of the host?', array(), TRUE);\n\t\t\t\t$tmp['pps']\t\t\t= 4;\n\t\t\t\t//$tmp['pps']\t\t\t= self::query('How many position packets per second do you want to receive?');\n\t\t\t\t\n\t\t\t\tunset($tmp['useRelay']);\n\t\t\t}\n\n\t\t\t$tmp['flags']\t\t\t= 0;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Are you connecting to dedicated or listen server?', array('dedi', 'listen')) == 'yes') ? 0 : ISF_LOCAL;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Keep colours in MSO text?', array('yes', 'no')) == 'yes') ? ISF_MSO_COLS : 0;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Receive Node Lap Player (Less Detailed then MCI) packets?', array('yes', 'no')) == 'yes') ? ISF_NLP : 0;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Receive Muli Car Info (Most detailed real time packet) packets?', array('yes', 'no')) == 'yes') ? ISF_MCI : 0;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Receive Contact packets?', array('yes', 'no')) == 'yes') ? ISF_CON : 0;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Receive Object Hit packets?', array('yes', 'no')) == 'yes') ? ISF_OBH : 0;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Receive Hot Lap Verification packets?', array('yes', 'no')) == 'yes') ? ISF_HLV : 0;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Receive Auto X packet when loading and unloading track layouts?', array('yes', 'no')) == 'yes') ? ISF_AXM_LOAD : 0;\n\t\t\t$tmp['flags']\t\t\t+= (self::query('Receive Auto X packet when editing track layouts?', array('yes', 'no')) == 'yes') ? ISF_AXM_EDIT : 0;\n\n\t\t\t// Ask for the alias (hostID) for this connection\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\t$hostID = self::query('What would you like this connection to be known as?', array(), TRUE);\n\t\t\t\tif (isset($vars[$hostID]))\n\t\t\t\t\techo 'There already is a connection by that name. Please enter another one.'.PHP_EOL;\n\t\t\t\telse if (!preg_match('/^[a-zA-Z0-9]+$/', $hostID))\n\t\t\t\t\techo 'Please only use characters a-z, A-Z and 0-9'.PHP_EOL;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$c++;\n\t\t\tif ($hostID == '')\n\t\t\t\t$vars[\"host #{$c}\"] = $tmp;\n\t\t\telse\n\t\t\t\t$vars[$hostID] = $tmp;\n\t\t\tunset($hostID);\n\n\t\t\tif (self::query(PHP_EOL.'Would you like to add another host?', array('yes', 'no')) == 'no')\n\t\t\t\tbreak;\n\t\t}\n\t\techo PHP_EOL;\n\t}\n\n\tpublic static function queryPlugins(array &$vars, array &$hostvars)\n\t{\n\t\t// Check if plugins dir exists\n\t\tif (!file_exists(ROOTPATH.'/plugins/'))\n\t\t{\n\t\t\techo 'No plugins folder seems to exist. Cannot load any plugins at this time'.PHP_EOL;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// read plugins dir\n\t\t$plugins = array();\n\t\tforeach (new DirectoryIterator(ROOTPATH.'/plugins') as $fileInfo) {\n\t\t    if ($fileInfo->getType() != 'file' || !preg_match('/^.*\\.php$/', $fileInfo->getFilename()))\n\t\t    \tcontinue;\n\t\t    $plugins[] = preg_replace('/^(.*)\\.php$/', '$1', $fileInfo->getFilename());\n\t\t}\n\n\t\tif (count($plugins) == 0)\n\t\t{\n\t\t\techo 'Your plugins folder does not appear to contain any plugins. PRISM will not be doing much now...'.PHP_EOL;\n\t\t\treturn;\n\t\t}\n\t\t\t\t\n\t\techo '***PLUGINS SETUP***'.PHP_EOL;\n\t\techo 'You now have the chance to manually select which plugins to load.'.PHP_EOL;\n\t\techo 'Afterwards your plugin settings will be stored in ./config/plugins.ini for future use.'.PHP_EOL;\n\t\t\n\t\t// Loop through the plugins now, so we can tie hosts to each plugin\n\t\tforeach ($plugins as $plugin)\n\t\t{\n\t\t\techo PHP_EOL;\n\n\t\t\t// Ask if user wants this plugin\n\t\t\tif (self::query('Do you want to use the plugin \"'.$plugin.'\"?', array('yes', 'no')) == 'no')\n\t\t\t\tcontinue;\n\n\t\t\t// Print a list of available hosts\t\t\t\n\t\t\t$c = 1;\n\t\t\t$hostIDCache = array();\n\t\t\techo 'ID | Host details'.PHP_EOL;\n\t\t\techo '---+----------------'.PHP_EOL;\n\t\t\tforeach ($hostvars as $index => $values)\n\t\t\t{\n\t\t\t\t$hostIDCache[$c] = $values['id'];\n\t\t\t\tprintf('%-2d | %s (', $c, $values['id']);\n\t\t\t\tif (isset($values['useRelay']) && $values['useRelay'] == 1)\n\t\t\t\t\techo '\"'.$values['hostname'].'\" via relay';\n\t\t\t\telse\n\t\t\t\t\techo '\"'.$values['ip'].':'.$values['port'].'\"';\n\t\t\t\techo ')'.PHP_EOL;\n\t\t\t\t$c++;\n\t\t\t}\n\n\t\t\t// Select which hosts to tie to it\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\t$hostIDs = '';\n\t\t\t\tif ($c == 2)\n\t\t\t\t{\n\t\t\t\t\t$ids = self::query(PHP_EOL.'Enter the ID number of the host you want to tie to this plugin. Or type * for all hosts.', array(), TRUE);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\techo PHP_EOL.'Enter the ID numbers of the hosts you want to tie to this plugin. Or type * for all hosts.'.PHP_EOL;\n\t\t\t\t\t$ids = self::query('Separate each ID number by a space', array(), TRUE);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Validate user input\n\t\t\t\tif ($ids == '*')\n\t\t\t\t{\n\t\t\t\t\t$hostIDs .= '\"*\"';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$exp = explode(' ', $ids);\n\t\t\t\t\t$invalidIDs = '';\n\t\t\t\t\t$IDCache = array();\n\t\t\t\t\tforeach ($exp as $e)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($e == '')\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\t\t$id = (int) $e;\n\t\t\t\t\t\tif ($id < 1 || $id >= $c)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$invalidIDs .= $e.' ';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!in_array($id, $IDCache))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($hostIDs != '')\n\t\t\t\t\t\t\t\t$hostIDs .= ',';\n\t\t\t\t\t\t\t$hostIDs .= '\"'.$hostIDCache[$id].'\"';\n\t\t\t\t\t\t\t$IDCache[] = $id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ($invalidIDs != '')\n\t\t\t\t\t\techo 'You typed one or more invalid host ID ('.trim($invalidIDs).'). Please try again.'.PHP_EOL;\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Store this plugin's settings in target var\n\t\t\t$vars[$plugin] = array('useHosts' => substr($hostIDs, 1, -1));\n\t\t}\n\n\t\techo PHP_EOL;\n\t}\n\t\n\tpublic static function queryHttp(array &$vars)\n\t{\n\t\techo '***HTTP SETUP***'.PHP_EOL;\n\t\techo 'You now have the chance to manually enter the details of the http server.'.PHP_EOL;\n\t\techo 'Afterwards your http settings will be stored in ./config/http.ini for future use.'.PHP_EOL;\n\n\t\t// Ask if we want to use a http socket at all\n\t\tif (self::query(PHP_EOL.'Would you like to setup the web server?', array('yes', 'no')) == 'no')\n\t\t{\n\t\t\t$vars['ip'] = '';\n\t\t\t$vars['port'] = '0';\n\t\t\treturn;\n\t\t}\n\n\t\t// Ask which IP address to bind the listen socket to\n\t\twhile (true)\n\t\t{\n\t\t\t$vars['ip']\t\t= self::query('On which IP address should we listen? (blank means all)', array(), true);\n\t\t\tif ($vars['ip'] == '')\n\t\t\t\t$vars['ip'] = '0.0.0.0';\n\t\t\t\n\t\t\tif (!verifyIP($vars['ip']))\n\t\t\t\techo 'Invalid IPv4 address entered. Please try again.'.PHP_EOL;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// Ask which Port to listen on\n\t\twhile (true)\n\t\t{\n\t\t\t$vars['port']\t\t= (int) self::query('On which Port should we listen? (blank means Port 80)', array(), true);\n\t\t\tif ($vars['port'] == '')\n\t\t\t\t$vars['port'] = '80';\n\n\t\t\tif ($vars['port'] < 1 || $vars['port'] > 65535)\n\t\t\t\techo 'Invalid Port number entered. Please try again.'.PHP_EOL;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Ask if we want to turn on httpAuth\n\t\tif (self::query('Do you want to restrict access to the admin website with a http login query?', array('yes', 'no')) == 'yes')\n\t\t{\n\t\t\t$vars['httpAuthPath'] = '/';\n\t\t}\n\t\techo PHP_EOL;\n\t}\n\t\n\tpublic static function queryTelnet(array &$vars)\n\t{\n\t\techo '***TELNET SETUP***'.PHP_EOL;\n\t\techo 'You now have the chance to manually enter the details of the telnet server.'.PHP_EOL;\n\t\techo 'Afterwards your telnet settings will be stored in ./config/telnet.ini for future use.'.PHP_EOL;\n\n\t\t// Ask if we want to use a telnet socket at all\n\t\tif (self::query(PHP_EOL.'Would you like to setup the telnet server?', array('yes', 'no')) == 'no')\n\t\t{\n\t\t\t$vars['ip'] = '';\n\t\t\t$vars['port'] = '0';\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Ask which IP address to bind the listen socket to\n\t\twhile (true)\n\t\t{\n\t\t\t$vars['ip']\t\t= self::query('On which IP address should we listen? (blank means all)', array(), true);\n\t\t\tif ($vars['ip'] == '')\n\t\t\t\t$vars['ip'] = '0.0.0.0';\n\t\t\t\n\t\t\tif (!verifyIP($vars['ip']))\n\t\t\t\techo 'Invalid IPv4 address entered. Please try again.'.PHP_EOL;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// Ask which Port to listen on\n\t\twhile (true)\n\t\t{\n\t\t\t$vars['port']\t= (int) self::query('On which Port should we listen? (blank means Port 23', array(), true);\n\t\t\tif ($vars['port'] == '')\n\t\t\t\t$vars['port'] = '23';\n\t\t\t\n\t\t\tif ($vars['port'] < 1 || $vars['port'] > 65535)\n\t\t\t\techo 'Invalid Port number entered. Please try again.'.PHP_EOL;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\techo PHP_EOL;\n\t}\n\t\n\tpublic static function queryAdmins(array &$vars)\n\t{\n\t\tglobal $PRISM;\n\t\t\n\t\t$hostVars = $PRISM->hosts->getHostsInfo();\n\t\t\n\t\techo '***ADMIN SETUP***'.PHP_EOL;\n\t\techo 'You now have the chance to create PRISM admin accounts.'.PHP_EOL;\n\t\techo 'Afterwards your admins settings will be stored in ./config/admins.ini for future use.'.PHP_EOL;\n\n\t\tdo\n\t\t{\n\t\t\techo PHP_EOL;\n\t\t\t$tmp = array();\n\t\t\t\n\t\t\t$tmp['username']\t\t\t= self::query('Give the (LFS) username for the account');\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$tmp['password']\t\t= self::query('Give a password for the account');\n\t\t\t\t$tmp['passwordVeri']\t= self::query('Repeat the same password to verify');\n\t\t\t\tif ($tmp['password'] != $tmp['passwordVeri'])\n\t\t\t\t\techo 'Passwords did not match. Please try again.'.PHP_EOL;\n\t\t\t\telse if (strlen($tmp['password']) < 4)\n\t\t\t\t\techo 'The password is too short. Please enter a longer one.'.PHP_EOL;\n\t\t\t\telse if (strlen($tmp['password']) >= 40)\n\t\t\t\t\techo 'The password is too long. Please enter a shorter one.'.PHP_EOL;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t} while(true);\n\t\t\t\n\t\t\t// Print a list of available hosts\t\t\t\n\t\t\t$c = 1;\n\t\t\t$hostIDCache = array();\n\t\t\techo 'ID | Host details'.PHP_EOL;\n\t\t\techo '---+----------------'.PHP_EOL;\n\t\t\tforeach ($hostVars as $index => $values)\n\t\t\t{\n\t\t\t\t$hostIDCache[$c] = $values['id'];\n\t\t\t\tprintf('%-2d | %s (', $c, $values['id']);\n\t\t\t\tif (isset($values['useRelay']) && $values['useRelay'] == 1)\n\t\t\t\t\techo '\"'.$values['hostname'].'\" via relay';\n\t\t\t\telse\n\t\t\t\t\techo '\"'.$values['ip'].':'.$values['port'].'\"';\n\t\t\t\techo ')'.PHP_EOL;\n\t\t\t\t$c++;\n\t\t\t}\n\n\t\t\t// Select which hosts to tie to this new admin\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\t$hostIDs = '';\n\t\t\t\tif ($c == 2)\n\t\t\t\t{\n\t\t\t\t\t$ids = self::query(PHP_EOL.'Enter the ID number of the host you want to tie to this admin. Or type * for all hosts.', array(), TRUE);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\techo PHP_EOL.'Enter the ID numbers of the hosts you want to tie to this admin. Or type * for all hosts.'.PHP_EOL;\n\t\t\t\t\t$ids = self::query('Separate each ID number by a space', array(), TRUE);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Validate user input\n\t\t\t\tif ($ids == '*')\n\t\t\t\t{\n\t\t\t\t\t$hostIDs .= '*';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$exp = explode(' ', $ids);\n\t\t\t\t\t$invalidIDs = '';\n\t\t\t\t\t$IDCache = array();\n\t\t\t\t\tforeach ($exp as $e)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($e == '')\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\t\t$id = (int) $e;\n\t\t\t\t\t\tif ($id < 1 || $id >= $c)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$invalidIDs .= $e.' ';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!in_array($id, $IDCache))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($hostIDs != '')\n\t\t\t\t\t\t\t\t$hostIDs .= ',';\n\t\t\t\t\t\t\t$hostIDs .= $hostIDCache[$id];\n\t\t\t\t\t\t\t$IDCache[] = $id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ($invalidIDs != '')\n\t\t\t\t\t\techo 'You typed one or more invalid host ID ('.trim($invalidIDs).'). Please try again.'.PHP_EOL;\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$tmp['connection']\t\t\t= $hostIDs;\n\t\t\t$tmp['accessFlags']\t\t\t= 'abcdefghijklmnopqrstuvwxyz';\n\t\t\t\n\t\t\t$vars[$tmp['username']] \t= array(\n\t\t\t\t'password'\t\t=> sha1($tmp['password'].$PRISM->config->cvars['secToken']),\n\t\t\t\t'connection'\t=> $tmp['connection'],\n\t\t\t\t'accessFlags'\t=> $tmp['accessFlags'],\n\t\t\t\t'realmDigest'\t=> md5($tmp['username'].':'.HTTP_AUTH_REALM.':'.$tmp['password']),\n\t\t\t);\n\t\t\t\n\t\t\tif (self::query(PHP_EOL.'Add another admin account?', array('yes', 'no')) == 'no')\n\t\t\t\tbreak;\n\t\t} while(true);\n\t}\n\n\t/*\t$question\t- the string that will be presented to the user.\n\t *\t$options\t- optional array of answers of which one must be matched.\n\t *\t$allowEmpty\t- whether to allow an empty input or not.\n\t */\n\tpublic static function query($question, array $options = array(), $allowEmpty = false)\n\t{\n\t\t$input = '';\n\t\t$numOptions = count($options);\n\t\t\n\t\twhile(true)\n\t\t{\n\t\t\techo $question;\n\t\t\tif (count($options))\n\t\t\t{\n\t\t\t\techo ' [';\n\t\t\t\tforeach ($options as $index => $option)\n\t\t\t\t{\n\t\t\t\t\tif ($index > 0)\n\t\t\t\t\t\techo '/';\n\t\t\t\t\techo $option;\n\t\t\t\t}\n\t\t\t\techo ']';\n\t\t\t}\n\t\t\techo ' : ';\n\t\t\t$input = trim(fread(STDIN, 1024));\n\t\t\t\n\t\t\tif ($input == '')\n\t\t\t{\n\t\t\t\tif ($allowEmpty)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if ($numOptions > 0)\n\t\t\t{\n\t\t\t\tif (in_array($input, $options))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $input;\n\t}\n}\n\n?>"]],"start1":0,"start2":0,"length1":0,"length2":13756}]],"length":13756}
{"contributors":[],"silentsave":true,"ts":1363202289819,"patch":[[{"diffs":[[0,"ive\n*/\n\n"],[1,"\n"],[0,"class In"]],"start1":87,"start2":87,"length1":16,"length2":17}]],"length":13757,"saved":false}
{"ts":1363202293458,"patch":[[{"diffs":[[0,"ive\n*/\n\n"],[1,"namespace PRI\n"],[0,"\nclass I"]],"start1":87,"start2":87,"length1":16,"length2":30}]],"length":13771,"saved":false}
{"ts":1363202294953,"patch":[[{"diffs":[[0,"pace PRI"],[1,"SM\\"],[0,"\n\nclass "]],"start1":100,"start2":100,"length1":16,"length2":19}]],"length":13774,"saved":false}
{"ts":1363202296873,"patch":[[{"diffs":[[0,"e PRISM\\"],[1,"Module\\I"],[0,"\n\nclass "]],"start1":103,"start2":103,"length1":16,"length2":24}]],"length":13782,"saved":false}
{"ts":1363202299679,"patch":[[{"diffs":[[0,"Module\\I"],[1,"nteractive;"],[0,"\n\nclass "]],"start1":111,"start2":111,"length1":16,"length2":27}]],"length":13793,"saved":false}
{"contributors":[],"silentsave":true,"ts":1363273935475,"patch":[[{"diffs":[[0,"ive\n*/\n\n"],[1,"namespace PRISM\\Module;\n\n"],[0,"class In"]],"start1":87,"start2":87,"length1":16,"length2":41}]],"length":13781,"saved":false}
