{"ts":1363142398755,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * PHPInSimMod - Time Module\n * @package PRISM\n * @subpackage Time\n * @copyright the AMX Mod X Development Team & The PRISM Devlopment Team.\n*/\n\nclass Time\n{\n\t// Time unit types.\n\tconst UNIT_SECONDS\t\t= 0;\n\tconst UNIT_MINUTES\t\t= 1;\n\tconst UNIT_HOURS\t\t= 2;\n\tconst UNIT_DAYS\t\t\t= 3;\n\tconst UNIT_WEEKS\t\t= 4;\n\n\t// The number of seconds that are in each time unit.\n\tconst SECONDS_IN_MINUTE = 60;\n\tconst SECONDS_IN_HOUR   = 3600;\n\tconst SECONDS_IN_DAY    = 86400;\n\tconst SECONDS_IN_WEEK   = 604800;\n\n\t/**\n\t * @desc: By Brad for AMX Mod X.\n\t * @param: Unit - The number of time units you want translated into verbose text.\n\t * @param: Type - The type of unit (i.e. seconds, minutes, hours, days, weeks) that you are passing in.\n\t*/\n\tstatic function getLength($unit, $type = Time::UNIT_SECONDS)\n\t{\n\t\t# Ensure the varables are of the correct datatype.\n\t\t$unit = (int) $unit;\n\t\t$type = (int) $type;\n\n\t\t# If our units happens to equal zero, skip.\n\t\tif ($unit == 0)\n\t\t\treturn '0 seconds';\n\n\t\t# Determine the number of each time unit there are.\n\t\t$weeks = 0; $days = 0; $hours = 0; $minutes = 0; $seconds = 0;\n\n\t\t# Handle the various scales of time.\n\t\tswitch ($type)\n\t\t{\n\t\t\tcase Time::UNIT_SECONDS: $seconds = $unit;\n\t\t\tcase Time::UNIT_MINUTES: $seconds = $unit * Time::SECONDS_IN_MINUTE;\n\t\t\tcase Time::UNIT_HOURS:   $seconds = $unit * Time::SECONDS_IN_HOUR;\n\t\t\tcase Time::UNIT_DAYS:    $seconds = $unit * Time::SECONDS_IN_DAY;\n\t\t\tcase Time::UNIT_WEEKS:   $seconds = $unit * Time::SECONDS_IN_WEEK;\n\t\t}\n\n\t\t# How many weeks left?\n\t\t$weeks = $seconds / Time::SECONDS_IN_WEEK;\n\t\t$seconds -= ($weeks * Time::SECONDS_IN_WEEK);\n\n\t\t# How many days left?\n\t\t$days = $seconds / Time::SECONDS_IN_DAY;\n\t\t$seconds -= ($days * Time::SECONDS_IN_DAY);\n\n\t\t# How many hours left?\n\t\t$hours = $seconds / Time::SECONDS_IN_HOUR;\n\t\t$seconds -= ($hours * Time::SECONDS_IN_HOUR);\n\n\t\t# How many minutes left?\n\t\t$minutes = $seconds / Time::SECONDS_IN_MINUTE;\n\t\t$seconds -= ($minutes * Time::SECONDS_IN_MINUTE);\n\n\t\t# Seconds are the base unit, so it's handled intrinsically\n\n\t\t// Translate the unit counts into verbose text\n\t\t$timeElement = array();\n\n\t\tif ($weeks > 0)\n\t\t\t$timeElement[] = sprintf(\"%i %s\", $weeks, ($weeks == 1) ? \"week\" : \"weeks\");\n\t\tif ($days > 0)\n\t\t\t$timeElement[] = sprintf(\"%i %s\", $days, ($days == 1) ? \"day\" : \"days\");\n\t\tif ($hours > 0)\n\t\t\t$timeElement[] = sprintf(\"%i %s\", $hours, ($hours == 1) ? \"hour\" : \"hours\");\n\t\tif ($minutes > 0)\n\t\t\t$timeElement[] = sprintf(\"%i %s\", $minutes, ($minutes == 1) ? \"minute\" : \"minutes\");\n\t\tif ($seconds > 0)\n\t\t\t$timeElement[] = sprintf(\"%i %s\", $seconds, ($seconds == 1) ? \"second\" : \"seconds\");\n\n\t\t// Outputs are final result in the correct format.\n\t\tswitch(count($timeElement))\n\t\t{\n\t\t\tcase 1: return sprintf(\"%s\", $timeElement[0]);\n\t\t\tcase 2: return sprintf(\"%s & %s\", $timeElement[0], $timeElement[1]);\n\t\t\tcase 3: return sprintf(\"%s, %s & %s\", $timeElement[0], $timeElement[1], $timeElement[2]);\n\t\t\tcase 4: return sprintf(\"%s, %s, %s & %s\", $timeElement[0], $timeElement[1], $timeElement[2], $timeElement[3]);\n\t\t\tcase 5: return sprintf(\"%s, %s, %s, %s & %s\", $timeElement[0], $timeElement[1], $timeElement[2], $timeElement[3], $timeElement[4]);\n\t\t}\n\t}\n}\n\n?>\n"]],"start1":0,"start2":0,"length1":0,"length2":3187}]],"length":3187}
{"contributors":[],"silentsave":true,"ts":1363318303616,"patch":[[{"diffs":[[0,"am.\n*/\n\n"],[1,"namespace PRISM\\Module;\n\n"],[0,"class Ti"]],"start1":147,"start2":147,"length1":16,"length2":41},{"diffs":[[0,"it == 0)"],[1," {"],[0,"\n\t\t\tretu"]],"start1":978,"start2":978,"length1":16,"length2":18},{"diffs":[[0,"}\n}\n"],[-1,"\n?>\n"]],"start1":3206,"start2":3206,"length1":8,"length2":4}]],"length":3210,"saved":false}
{"ts":1363318305790,"patch":[[{"diffs":[[0,"econds';"],[1,"\n\t\t}"],[0,"\n\n\t\t# De"]],"start1":1003,"start2":1003,"length1":16,"length2":20}]],"length":3214,"saved":false}
{"ts":1363318314025,"patch":[[{"diffs":[[0," ($type)"],[-1,"\n\t\t"],[0,"{\n\t\t\tcas"]],"start1":1184,"start2":1184,"length1":19,"length2":16}]],"length":3211,"saved":false}
{"ts":1363318316039,"patch":[[{"diffs":[[0," ($type)"],[1," "],[0,"{\n\t\t\tcas"]],"start1":1184,"start2":1184,"length1":16,"length2":17}]],"length":3212,"saved":false}
{"ts":1363318323901,"patch":[[{"diffs":[[0,"($weeks > 0)"],[1," {"],[0,"\n\t\t\t$timeEle"]],"start1":2151,"start2":2151,"length1":24,"length2":26}]],"length":3214,"saved":false}
{"ts":1363318327601,"patch":[[{"diffs":[[0,": \"weeks\");\n"],[1,"\t\t}\n"],[0,"\t\tif ($days "]],"start1":2234,"start2":2234,"length1":24,"length2":28}]],"length":3218,"saved":false}
{"ts":1363318328697,"patch":[[{"diffs":[[0,"\");\n\t\t}\n"],[1,"        \n"],[0,"\t\tif ($d"]],"start1":2242,"start2":2242,"length1":16,"length2":25}]],"length":3227,"saved":false}
{"ts":1363318331365,"patch":[[{"diffs":[[0," ($days > 0)"],[1," {"],[0,"\n\t\t\t$timeEle"]],"start1":2263,"start2":2263,"length1":24,"length2":26}]],"length":3229,"saved":false}
{"ts":1363318333262,"patch":[[{"diffs":[[0," : \"days\");\n"],[1,"\t\t}\n"],[0,"\t\tif ($hours"]],"start1":2342,"start2":2342,"length1":24,"length2":28}]],"length":3233,"saved":false}
{"ts":1363318336938,"patch":[[{"diffs":[[0,"\");\n\t\t}\n"],[1,"        \n"],[0,"\t\tif ($h"]],"start1":2350,"start2":2350,"length1":16,"length2":25}]],"length":3242,"saved":false}
{"ts":1363318339226,"patch":[[{"diffs":[[0,"($hours > 0)"],[1," {"],[0,"\n\t\t\t$timeEle"]],"start1":2372,"start2":2372,"length1":24,"length2":26}]],"length":3244,"saved":false}
{"ts":1363318343421,"patch":[[{"diffs":[[0,": \"hours\");\n"],[1,"\t\t}\n"],[0,"\t\tif ($minut"]],"start1":2455,"start2":2455,"length1":24,"length2":28}]],"length":3248,"saved":false}
{"ts":1363318345723,"patch":[[{"diffs":[[0,"\");\n\t\t}\n"],[1,"        \n"],[0,"\t\tif ($m"]],"start1":2463,"start2":2463,"length1":16,"length2":25}]],"length":3257,"saved":false}
{"ts":1363318347769,"patch":[[{"diffs":[[0,"minutes > 0)"],[1,"{"],[0,"\n\t\t\t$timeEle"]],"start1":2487,"start2":2487,"length1":24,"length2":25}]],"length":3258,"saved":false}
{"ts":1363318350405,"patch":[[{"diffs":[[0,"tes > 0)"],[1," "],[0,"{\n\t\t\t$ti"]],"start1":2491,"start2":2491,"length1":16,"length2":17}]],"length":3259,"saved":false}
{"ts":1363318353431,"patch":[[{"diffs":[[0,"utes\");\n"],[1,"\t\t}\n        \n"],[0,"\t\tif ($s"]],"start1":2582,"start2":2582,"length1":16,"length2":29}]],"length":3272,"saved":false}
{"ts":1363318356004,"patch":[[{"diffs":[[0,"nds > 0)"],[1," {"],[0,"\n\t\t\t$tim"]],"start1":2614,"start2":2614,"length1":16,"length2":18}]],"length":3274,"saved":false}
{"ts":1363318358130,"patch":[[{"diffs":[[0,"conds\");"],[1,"\n            "],[0,"\n\n\t\t// O"]],"start1":2704,"start2":2704,"length1":16,"length2":29}]],"length":3287,"saved":false}
{"ts":1363318359264,"patch":[[{"diffs":[[0,"\");\n"],[-1,"            "],[1,"\t\t}"],[0,"\n\n\t\t"]],"start1":2709,"start2":2709,"length1":20,"length2":11}]],"length":3278,"saved":false}
{"ts":1363318366483,"patch":[[{"diffs":[[0,"lement))"],[-1,"\n\t\t"],[0,"{\n\t\t\tcas"]],"start1":2792,"start2":2792,"length1":19,"length2":16}]],"length":3275,"saved":false}
{"ts":1363318367741,"patch":[[{"diffs":[[0,"lement))"],[1," "],[0,"{\n\t\t\tcas"]],"start1":2792,"start2":2792,"length1":16,"length2":17}]],"length":3276,"saved":false}
{"ts":1363318379964,"patch":[[{"diffs":[[0,"eam.\n*/\n"],[1,"# Almost PSR"],[0,"\nnamespa"]],"start1":146,"start2":146,"length1":16,"length2":28}]],"length":3288,"saved":false}
