{"ts":1363202053504,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"﻿<?php\n\n/**\n * Properties are private by design.\n * You should never edit an object. Just create a new one as you need to remove the old object and add the new one.\n */\nclass LayoutObject {\n\tconst UNPACK = 'sX/sY/CZ/CFlags/CIndex/CHeading';\n\tconst PACK = 'ssCCCC';\n\n\tprivate $x;\n\tprivate $y;\n\tprivate $z;\n\t\n\tprivate $hdng;\n\t\n\tprivate $index = -1;\n\tprivate $type;\n\tprivate $typeData = 0; /** object index / circle radius / checkpoint half-width */\n\tprivate $colour = 0;\n\t\n\tpublic static $OBJ_REAL_OBJECT\t\t= 'object';\n\tpublic static $OBJ_RESTRICTED\t\t= 'restricted_area';\n\tpublic static $OBJ_MARSHALL\t\t\t= 'marshall';\n\tpublic static $OBJ_MARSHALL_LEFT\t= 'marshall_left';\n\tpublic static $OBJ_MARSHALL_RIGHT\t= 'marshall_right';\n\tpublic static $OBJ_ROUTE_CHECK\t\t= 'route_check';\n\tpublic static $OBJ_START\t\t\t= 'start';\n\tpublic static $OBJ_CHECK_1\t\t\t= 'check_1';\n\tpublic static $OBJ_CHECK_2\t\t\t= 'check_2';\n\tpublic static $OBJ_CHECK_3\t\t\t= 'check_3';\n\tpublic static $OBJ_FINISH\t\t\t= 'finish';\n\t\n\t/**\n\t * Constructor.\n\t * Either pass an 8 Byte data struture provided by insim or in the layout file or all other params as well.\n\t * @param dataOrX 8 byte data or value for X coordinate\n\t * @param y Y coordinate\n\t * @param z Z coordinate\n\t * @param type one of LayoutObject::$OBJ_... values\n\t * @param hdng heading in degree or route index\n\t * @param typeData object index, circle radius or half-width of control point\n\t * @param colour Colour for chalk and tyre stacks\n\t */\n\tpublic function __construct($dataOrX, $y = null, $z = null, $type = null, $hdng = null, $typeData = null, $colour = null) {\n\t\tif ($type != null)\n\t\t{\n\t\t\t$this->x = $dataOrX;\n\t\t\t$this->y = $y;\n\t\t\t$this->z = $z;\n\t\t\t$this->type = $type;\n\t\t\tif ($this->type == self::$OBJ_ROUTE_CHECK)\n\t\t\t{\n\t\t\t\t$this->setRouteIndex($hdng);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->setHeading($hdng);\n\t\t\t}\n\t\t\t$this->typeData = $typeData;\n\t\t\t$this->colour = $colour;\n\t\t}\n\t\telse {\n\t\t\t$this->initFromBytes($dataOrX);\n\t\t}\n\t}\n\t\n\tpublic function __toString() {\n\t\t$retVal = $this->type;\n\t\t\n\t\tif ($this->type == self::$OBJ_REAL_OBJECT)\n\t\t{\n\t\t\t$retVal .= ': ' . self::$REV_AXO[$this->typeData];\n\t\t\tif ($this->typeData >= self::$AXO_CHALK_LINE && $this->typeData <= self::$AXO_CHALK_RIGHT3)\n\t\t\t{\n\t\t\t\t$retVal .= ', col:' . self::$REV_CC[$this->colour];\n\t\t\t}\n\t\t\telse if ($this->typeData >= self::$AXO_TYRE_SINGLE && $this->typeData <= self::$AXO_TYRE_STACK4_BIG)\n\t\t\t{\n\t\t\t\t$retVal .= ', col:' . self::$REV_TC[$this->colour];\n\t\t\t}\n\t\t}\n\t\treturn $retVal;\n\t}\n\t\n\tpublic function pack() {\n\t\t$x = $this->rawX();\n\t\t$y = $this->rawY();\n\t\t$z = $this->z * 4;\n\t\t\n\t\t$dat = $this->dataForType();\n\t\t$flags = $dat['flags'];\n\t\t$index = $dat['index'];\n\t\t$heading = $dat['heading'];\n\t\t\n\t\treturn pack(LayoutObject::PACK, $x, $y, $z, $flags, $index, $heading);\n\t}\n\t\n\tpublic function rawX()\n\t{\n\t\treturn round($this->x * 16);\n\t}\n\t\n\tpublic function rawY()\n\t{\n\t\treturn round($this->y * 16);\n\t}\n\t\n\tpublic function initFromBytes($data) {\n\t$obj = unpack(LayoutObject::UNPACK, $data);\n\t\t// scale ...\n\t\t$this->x = $obj['X'] / 16;\n\t\t$this->y = $obj['Y'] / 16;\n\t\t$this->z = $obj['Z'] / 4;\n\t\t$this->setHeading($obj['Heading'] / 256 * 360);\n\t\t\n\t\t$ix = $obj['Index'];\n\t\t$this->index = $ix;\n\t\t$flg = $obj['Flags'];\n\t\t\n\t\tif ($ix >= 192) // either a circle or an unknown object\n\t\t{\n\t\t\tif ($ix==255) // it's a marshall circle\n\t\t\t{\n\t\t\t\tif (($flg & 0x80) != 0) // highest bit set : restricted area\n\t\t\t\t{\n\t\t\t\t\t// HeadingByte has the same meaning as it does for all objects\n\t\t\t\t\t// Flags byte contains the following data :\n\t\t\t\t\t// bits 0 to 1 :\n\t\t\t\t\tswitch ($flg & 0x03) {\n\t\t\t\t\t\t// 00 = no marshall\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t$this->type = self::$OBJ_RESTRICTED;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// 01 = standing marshall\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t$this->type = self::$OBJ_MARSHALL;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// 10 = marshall pointing left\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t$this->type = self::$OBJ_MARSHALL_LEFT;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// 11 = marshall pointing right\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t$this->type = self::$OBJ_MARSHALL_RIGHT;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// bits 2 to 5 :\n\t\t\t\t\t// circle diameter in metres (shifted left by 2 bits)\n\t\t\t\t\t$this->typeData = ($flg >> 2) & 0x07;\n\t\t\t\t}\n\t\t\t\telse // highest bit of flags is not set : route checker\n\t\t\t\t{\n\t\t\t\t\t$this->type = self::$OBJ_ROUTE_CHECK;\n\t\t\t\t\t// HeadingByte is used not for heading, but the route index\n\t\t\t\t\t// bits 2 to 5 :\n\t\t\t\t\t// circle diameter in metres (shifted left by 2 bits)\n\t\t\t\t\t$this->typeData = ($flg >> 2) & 0x0F;\n\t\t\t\t\t$this->hdng = $obj['Heading'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// unknown object - ignore\n\t\t\t\t$this->type = array($flg, $ix);\n\t\t\t}\n\t\t}\n\t\telse // could be an actual object or a control object\n\t\t{\n\t\t\tif(($flg & 0x80) != 0) // highest bit set : control object\n\t\t\t// bit 6 : never set\n\t\t\t// bit 7 : always set (0x80)\n\t\t\t{\n\t\t\t\t// bits 2 to 5 :\n\t\t\t\t// Checkpoint width(half width!) in metres (shifted left by 2 bits)\n\t\t\t\t$this->typeData = (($flg >> 2) & 0x07);\n\t\t\t\t// Flags byte contains the following data :\n\t\t\t\t// bits 0 to 1 :\n\t\t\t\tswitch ($flg & 0x03) {\n\t\t\t\t\t// 00 = Start position (if width = 0) or finish line (if width > 0)\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tif ($this->typeData == 0) {\n\t\t\t\t\t\t\t$this->type = self::$OBJ_START;\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t$this->type = self::$OBJ_FINISH;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// 01 = Checkpoint 1\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$this->type = self::$OBJ_CHECK_1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// 10 = Checkpoint 2\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t$this->type = self::$OBJ_CHECK_2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// 11 = Checkpoint 3\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\t$this->type = self::$OBJ_CHECK_3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse // highest bit of flags is not set : autocross object\n\t\t\t{\n\t\t\t\t$this->type = self::$OBJ_REAL_OBJECT;\n\t\t\t\t// save flag as colour (even if it's just tyres and chalk)\n\t\t\t\techo 'flag is:'.$flg;\n\t\t\t\t$this->colour = $flg;\n\t\t\t\t$this->typeData = $ix;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Computes the index flag and heading fields for the current object.\n\t * @return array Array containing the value for 'flags', 'index' and 'heading'\n\t */\n\tpublic function dataForType() {\n\t\t$dat = array();\n\t\t\n\t\tswitch($this->type) {\n\t\t\tcase self::$OBJ_RESTRICTED:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C | 0x80;\n\t\t\t\t$dat['index'] = 255;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_MARSHALL:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C | 0x81;\n\t\t\t\t$dat['index'] = 255;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_MARSHALL_LEFT:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C | 0x82;\n\t\t\t\t$dat['index'] = 255;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_MARSHALL_RIGHT:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C | 0x83;\n\t\t\t\t$dat['index'] = 255;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_ROUTE_CHECK:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C;\n\t\t\t\t$dat['index'] = 255;\n\t\t\t\t$dat['heading'] = $this->hdng;\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase self::$OBJ_REAL_OBJECT:\n\t\t\t\t$dat['flags'] = $this->colour;\n\t\t\t\t$dat['index'] = $this->typeData;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_START:\n\t\t\t\t$dat['flags'] = 0x80;\n\t\t\t\t$dat['index'] = 0;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_CHECK_1:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C | 0x81;\n\t\t\t\t$dat['index'] = 0;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_CHECK_2:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C | 0x82;\n\t\t\t\t$dat['index'] = 0;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_CHECK_3:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C | 0x83;\n\t\t\t\t$dat['index'] = 0;\n\t\t\t\tbreak;\n\t\t\tcase self::$OBJ_FINISH:\n\t\t\t\t$dat['flags'] = $this->typeData << 2 & 0x3C | 0x80;\n\t\t\t\t$dat['index'] = 0;\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\n\t\t\t\t// unknown objects...\n\t\t\t\tif (is_array($this->type)) {\n\t\t\t\t\t$dat['flags'] = $this->type[0];\n\t\t\t\t\t$dat['index'] = $this->type[1];\n\t\t\t\t}\n\t\t}\n\t\t\n\t\t// default heading calculation\n\t\tif (!isset($dat['heading'])) {\n\t\t\t$dat['heading'] = ($this->hdng/* + 180*/) * 256 / 360;\n\t\t}\n\t\t\n\t\treturn $dat;\n\t}\n\t\n\t/**\n\t * Set the heading in deg.\n\t * Normalizes the heading to use the lfs notation between -180° and 180°.\n\t */\n\tprivate function setHeading($val) {\n\t\tif ($this->type == self::$OBJ_ROUTE_CHECK) {\n\t\t\tthrow new Exception('Trying to set heading on route checker object. Use setRouteIndex instead.');\n\t\t}\n\t\t\n\t\tif (!is_numeric($val)) {\n\t\t\tthrow new Exception('Invalid heading index.');\n\t\t}\n\t\t\n\t\t// val must be between -180 and 180\n\t\t$deg = $val;\n\t\twhile ($deg < -179) {\n\t\t\t$deg += 360;\n\t\t}\n\t\twhile ($deg > 180) {\n\t\t\t$deg -= 360;\n\t\t}\n\t\t\n\t\t$this->hdng = $deg;\n\t}\n\t\n\t/**\n\t * Set the route index if the object is a route check.\n\t */\n\tprivate function setRouteIndex($val) {\n\t\tif ($this->type != self::$OBJ_ROUTE_CHECK) {\n\t\t\tthrow new Exception('Trying to set route index on a non route checker object. Use setHeading instead.');\n\t\t}\n\t\t\n\t\tif (!is_int($val) || $val < 0 || $val > 90) { // TODO check what's the actual max value\n\t\t\tthrow new Exception('Invalid route index.');\n\t\t}\n\t\t\n\t\t$this->hdng = $val;\n\t}\n\t\n\tpublic function x()\n\t{\n\t\treturn $this->x;\n\t}\n\tpublic function setX($x)\n\t{\n\t\t$this->x = $x;\n\t}\n\t\n\tpublic function y()\n\t{\n\t\treturn $this->y;\n\t}\n\tpublic function setY($y)\n\t{\n\t\t$this->y = $y;;\n\t}\n\tpublic function z()\n\t{\n\t\treturn $this->z;\n\t}\n\tpublic function heading()\n\t{\n\t\treturn $this->hdng;\n\t}\n\tpublic function type()\n\t{\n\t\treturn $this->type;\n\t}\n\tpublic function typeData()\n\t{\n\t\treturn $this->typeData;\n\t}\n\tpublic function colour()\n\t{\n\t\treturn $this->colour;\n\t}\n\tpublic function index()\n\t{\n\t\tif ($this->index == -1)\n\t\t{\n\t\t\t$dat = $this->dataForType();\n\t\t\t$this->index = $dat['index'];\n\t\t}\n\t\t\n\t\treturn $this->index;\n\t}\n\n\tpublic static $AXO_CHALK_LINE = 4;\n\tpublic static $AXO_CHALK_LINE2 = 5;\n\tpublic static $AXO_CHALK_AHEAD = 6;\n\tpublic static $AXO_CHALK_AHEAD2 = 7;\n\tpublic static $AXO_CHALK_LEFT = 8;\n\tpublic static $AXO_CHALK_LEFT2 = 9;\n\tpublic static $AXO_CHALK_LEFT3 = 10;\n\tpublic static $AXO_CHALK_RIGHT = 11;\n\tpublic static $AXO_CHALK_RIGHT2 = 12;\n\tpublic static $AXO_CHALK_RIGHT3 = 13;\n\tpublic static $AXO_14 = 14;\n\tpublic static $AXO_15 = 15;\n\tpublic static $AXO_16 = 16;\n\tpublic static $AXO_17 = 17;\n\tpublic static $AXO_18 = 18;\n\tpublic static $AXO_19 = 19;\n\tpublic static $AXO_CONE_RED = 20;\n\tpublic static $AXO_CONE_RED2 = 20;\n\tpublic static $AXO_CONE_RED3 = 22;\n\tpublic static $AXO_CONE_BLUE = 23;\n\tpublic static $AXO_CONE_BLUE2 = 24;\n\tpublic static $AXO_CONE_GREEN = 25;\n\tpublic static $AXO_CONE_GREEN2 = 26;\n\tpublic static $AXO_CONE_ORANGE = 27;\n\tpublic static $AXO_CONE_WHITE = 28;\n\tpublic static $AXO_CONE_YELLOW = 29;\n\tpublic static $AXO_CONE_YELLOW2 = 30;\n\tpublic static $AXO_31 = 31;\n\tpublic static $AXO_32 = 32;\n\tpublic static $AXO_33 = 33;\n\tpublic static $AXO_34 = 34;\n\tpublic static $AXO_35 = 35;\n\tpublic static $AXO_36 = 36;\n\tpublic static $AXO_37 = 37;\n\tpublic static $AXO_38 = 38;\n\tpublic static $AXO_39 = 39;\n\tpublic static $AXO_CONE_PTR_RED = 40;\n\tpublic static $AXO_CONE_PTR_BLUE = 41;\n\tpublic static $AXO_CONE_PTR_GREEN = 42;\n\tpublic static $AXO_CONE_PTR_YELLOW = 43;\n\tpublic static $AXO_44 = 44;\n\tpublic static $AXO_45 = 45;\n\tpublic static $AXO_46 = 46;\n\tpublic static $AXO_47 = 47;\n\tpublic static $AXO_TYRE_SINGLE = 48;\n\tpublic static $AXO_TYRE_STACK2 = 49;\n\tpublic static $AXO_TYRE_STACK3 = 50;\n\tpublic static $AXO_TYRE_STACK4 = 51;\n\tpublic static $AXO_TYRE_SINGLE_BIG = 52;\n\tpublic static $AXO_TYRE_STACK2_BIG = 53;\n\tpublic static $AXO_TYRE_STACK3_BIG = 54;\n\tpublic static $AXO_TYRE_STACK4_BIG = 55;\n\tpublic static $AXO_56 = 56;\n\tpublic static $AXO_57 = 57;\n\tpublic static $AXO_58 = 58;\n\tpublic static $AXO_59 = 59;\n\tpublic static $AXO_60 = 60;\n\tpublic static $AXO_61 = 61;\n\tpublic static $AXO_62 = 62;\n\tpublic static $AXO_63 = 63;\n\tpublic static $AXO_MARKER_CURVE_L = 64;\n\tpublic static $AXO_MARKER_CURVE_R = 65;\n\tpublic static $AXO_MARKER_L = 66;\n\tpublic static $AXO_MARKER_R = 67;\n\tpublic static $AXO_MARKER_HARD_L = 68;\n\tpublic static $AXO_MARKER_HARD_R = 69;\n\tpublic static $AXO_MARKER_L_R = 70;\n\tpublic static $AXO_MARKER_R_L = 71;\n\tpublic static $AXO_MARKER_S_L = 72;\n\tpublic static $AXO_MARKER_S_R = 73;\n\tpublic static $AXO_MARKER_S2_L = 74;\n\tpublic static $AXO_MARKER_S2_R = 75;\n\tpublic static $AXO_MARKER_U_L = 76;\n\tpublic static $AXO_MARKER_U_R = 77;\n\tpublic static $AXO_78 = 78;\n\tpublic static $AXO_79 = 79;\n\tpublic static $AXO_80 = 80;\n\tpublic static $AXO_81 = 81;\n\tpublic static $AXO_82 = 82;\n\tpublic static $AXO_83 = 83;\n\tpublic static $AXO_DIST25 = 84;\n\tpublic static $AXO_DIST50 = 85;\n\tpublic static $AXO_DIST75 = 86;\n\tpublic static $AXO_DIST100 = 87;\n\tpublic static $AXO_DIST125 = 88;\n\tpublic static $AXO_DIST150 = 89;\n\tpublic static $AXO_DIST200 = 90;\n\tpublic static $AXO_DIST250 = 91;\n\tpublic static $AXO_92 = 92;\n\tpublic static $AXO_93 = 93;\n\tpublic static $AXO_94 = 94;\n\tpublic static $AXO_95 = 95;\n\tpublic static $AXO_ARMCO1 = 96;\n\tpublic static $AXO_ARMCO3 = 97;\n\tpublic static $AXO_ARMCO5 = 98;\n\tpublic static $AXO_99 = 99;\n\tpublic static $AXO_100 = 100;\n\tpublic static $AXO_101 = 101;\n\tpublic static $AXO_102 = 102;\n\tpublic static $AXO_103 = 103;\n\tpublic static $AXO_BARRIER_LONG = 104;\n\tpublic static $AXO_BARRIER_RED = 105;\n\tpublic static $AXO_BARRIER_WHITE = 106;\n\tpublic static $AXO_107 = 107;\n\tpublic static $AXO_108 = 108;\n\tpublic static $AXO_109 = 109;\n\tpublic static $AXO_110 = 110;\n\tpublic static $AXO_111 = 111;\n\tpublic static $AXO_BANNER1 = 112;\n\tpublic static $AXO_BANNER2 = 113;\n\tpublic static $AXO_114 = 114;\n\tpublic static $AXO_115 = 115;\n\tpublic static $AXO_116 = 116;\n\tpublic static $AXO_117 = 117;\n\tpublic static $AXO_118 = 118;\n\tpublic static $AXO_119 = 119;\n\tpublic static $AXO_RAMP1 = 114;\n\tpublic static $AXO_RAMP2 = 115;\n\tpublic static $AXO_122 = 122;\n\tpublic static $AXO_123 = 123;\n\tpublic static $AXO_124 = 124;\n\tpublic static $AXO_125 = 125;\n\tpublic static $AXO_126 = 126;\n\tpublic static $AXO_127 = 127;\n\tpublic static $AXO_SPEED_HUMP_10M = 128;\n\tpublic static $AXO_SPEED_HUMP_6M = 129;\n\tpublic static $AXO_130 = 130;\n\tpublic static $AXO_131 = 131;\n\tpublic static $AXO_132 = 132;\n\tpublic static $AXO_133 = 133;\n\tpublic static $AXO_134 = 134;\n\tpublic static $AXO_135 = 135;\n\tpublic static $AXO_POST_GREEN = 136;\n\tpublic static $AXO_POST_ORANGE = 137;\n\tpublic static $AXO_POST_RED = 138;\n\tpublic static $AXO_POST_WHITE = 139;\n\tpublic static $AXO_140 = 140;\n\tpublic static $AXO_141 = 141;\n\tpublic static $AXO_142 = 142;\n\tpublic static $AXO_143 = 143;\n\tpublic static $AXO_BALE = 144;\n\tpublic static $AXO_145 = 145;\n\tpublic static $AXO_146 = 146;\n\tpublic static $AXO_147 = 147;\n\tpublic static $AXO_RAILING = 148;\n\tpublic static $AXO_149 = 149;\n\tpublic static $AXO_150 = 150;\n\tpublic static $AXO_151 = 151;\n\tpublic static $AXO_152 = 152;\n\tpublic static $AXO_153 = 153;\n\tpublic static $AXO_154 = 154;\n\tpublic static $AXO_155 = 155;\n\tpublic static $AXO_156 = 156;\n\tpublic static $AXO_157 = 157;\n\tpublic static $AXO_158 = 158;\n\tpublic static $AXO_159 = 159;\n\tpublic static $AXO_SIGN_KEEP_LEFT = 160;\n\tpublic static $AXO_SIGN_KEEP_RIGHT = 161;\n\tpublic static $AXO_162 = 162;\n\tpublic static $AXO_163 = 163;\n\tpublic static $AXO_164 = 164;\n\tpublic static $AXO_165 = 165;\n\tpublic static $AXO_166 = 166;\n\tpublic static $AXO_167 = 167;\n\tpublic static $AXO_SIGN_SPEED_80 = 168;\n\tpublic static $AXO_SIGN_SPEED_50 = 169;\n\tpublic static $AXO_170 = 170;\n\tpublic static $AXO_171 = 171;\n\tpublic static $AXO_172 = 172;\n\tpublic static $AXO_173 = 173;\n\tpublic static $AXO_174 = 174;\n\tpublic static $AXO_175 = 175;\n\tpublic static $AXO_176 = 176;\n\tpublic static $AXO_177 = 177;\n\tpublic static $AXO_178 = 178;\n\tpublic static $AXO_179 = 179;\n\tpublic static $AXO_180 = 180;\n\tpublic static $AXO_181 = 181;\n\tpublic static $AXO_182 = 182;\n\tpublic static $AXO_183 = 183;\n\tpublic static $AXO_184 = 184;\n\tpublic static $AXO_185 = 185;\n\tpublic static $AXO_186 = 186;\n\tpublic static $AXO_187 = 187;\n\tpublic static $AXO_188 = 188;\n\tpublic static $AXO_189 = 189;\n\tpublic static $AXO_190 = 190;\n\tpublic static $AXO_191 = 191;\n\n\tpublic static $TC_BLACK = 0;\n\tpublic static $TC_WHITE = 1;\n\tpublic static $TC_RED = 2;\n\tpublic static $TC_BLUE = 3;\n\tpublic static $TC_GREEN = 4;\n\tpublic static $TC_YELLOW = 5;\n\n\tpublic static $CC_WHITE = 0;\n\tpublic static $CC_RED = 1;\n\tpublic static $CC_BLUE = 2;\n\tpublic static $CC_YELLOW = 3;\n\n\tpublic static $REV_AXO = array('AXO_NULL','AXO_1','AXO_2','AXO_3','AXO_CHALK_LINE','AXO_CHALK_LINE2','AXO_CHALK_AHEAD','AXO_CHALK_AHEAD2','AXO_CHALK_LEFT','AXO_CHALK_LEFT2','AXO_CHALK_LEFT3','AXO_CHALK_RIGHT','AXO_CHALK_RIGHT2','AXO_CHALK_RIGHT3','AXO_14','AXO_15','AXO_16','AXO_17','AXO_18','AXO_19','AXO_CONE_RED','AXO_CONE_RED2','AXO_CONE_RED3','AXO_CONE_BLUE','AXO_CONE_BLUE2','AXO_CONE_GREEN','AXO_CONE_GREEN2','AXO_CONE_ORANGE','AXO_CONE_WHITE','AXO_CONE_YELLOW','AXO_CONE_YELLOW2','AXO_31','AXO_32','AXO_33','AXO_34','AXO_35','AXO_36','AXO_37','AXO_38','AXO_39','AXO_CONE_PTR_RED','AXO_CONE_PTR_BLUE','AXO_CONE_PTR_GREEN','AXO_CONE_PTR_YELLOW','AXO_44','AXO_45','AXO_46','AXO_47','AXO_TYRE_SINGLE','AXO_TYRE_STACK2','AXO_TYRE_STACK3','AXO_TYRE_STACK4','AXO_TYRE_SINGLE_BIG','AXO_TYRE_STACK2_BIG','AXO_TYRE_STACK3_BIG','AXO_TYRE_STACK4_BIG','AXO_56','AXO_57','AXO_58','AXO_59','AXO_60','AXO_61','AXO_62','AXO_63','AXO_MARKER_CURVE_L','AXO_MARKER_CURVE_R','AXO_MARKER_L','AXO_MARKER_R','AXO_MARKER_HARD_L','AXO_MARKER_HARD_R','AXO_MARKER_L_R','AXO_MARKER_R_L','AXO_MARKER_S_L','AXO_MARKER_S_R','AXO_MARKER_S2_L','AXO_MARKER_S2_R','AXO_MARKER_U_L','AXO_MARKER_U_R','AXO_78','AXO_79','AXO_80','AXO_81','AXO_82','AXO_83','AXO_DIST25','AXO_DIST50','AXO_DIST75','AXO_DIST100','AXO_DIST125','AXO_DIST150','AXO_DIST200','AXO_DIST250','AXO_92','AXO_93','AXO_94','AXO_95','AXO_ARMCO1','AXO_ARMCO3','AXO_ARMCO5','AXO_99','AXO_100','AXO_101','AXO_102','AXO_103','AXO_BARRIER_LONG','AXO_BARRIER_RED','AXO_BARRIER_WHITE','AXO_107','AXO_108','AXO_109','AXO_110','AXO_111','AXO_BANNER1','AXO_BANNER2','AXO_114','AXO_115','AXO_116','AXO_117','AXO_118','AXO_119','AXO_RAMP1','AXO_RAMP2','AXO_122','AXO_123','AXO_124','AXO_125','AXO_126','AXO_127','AXO_SPEED_HUMP_10M','AXO_SPEED_HUMP_6M','AXO_130','AXO_131','AXO_132','AXO_133','AXO_134','AXO_135','AXO_POST_GREEN','AXO_POST_ORANGE','AXO_POST_RED','AXO_POST_WHITE','AXO_140','AXO_141','AXO_142','AXO_143','AXO_BALE','AXO_145','AXO_146','AXO_147','AXO_RAILING','AXO_149','AXO_150','AXO_151','AXO_152','AXO_153','AXO_154','AXO_155','AXO_156','AXO_157','AXO_158','AXO_159','AXO_SIGN_KEEP_LEFT','AXO_SIGN_KEEP_RIGHT','AXO_162','AXO_163','AXO_164','AXO_165','AXO_166','AXO_167','AXO_SIGN_SPEED_80','AXO_SIGN_SPEED_50','AXO_170','AXO_171','AXO_172','AXO_173','AXO_174','AXO_175','AXO_176','AXO_177','AXO_178','AXO_179','AXO_180','AXO_181','AXO_182','AXO_183','AXO_184','AXO_185','AXO_186','AXO_187','AXO_188','AXO_189','AXO_190','AXO_191');\n\tpublic static $REV_TC = array('TC_BLACK','TC_WHITE','TC_RED','TC_BLUE','TC_GREEN','TC_YELLOW');\n\tpublic static $REV_CC = array('CC_WHITE','CC_RED','CC_BLUE','CC_YELLOW');\n\n\tpublic static $Objects = array(\n\t\t0 => 'Scenery Object',\n\t\t4 => 'Long Chalk Line',\n\t\t5 => 'Short Chalk Line',\n\t\t6 => 'Short Ahead Arrow',\n\t\t7 => 'Long Ahead Arrow',\n\t\t8 => 'Short Left Curve Arrow',\n\t\t9 => 'Left Turn Arrow',\n\t\t10 => 'Long Left Curve Arrow',\n\t\t11 => 'Short Right Curve Arrow',\n\t\t12 => 'Right Turn Arrow',\n\t\t13 => 'Long Right Curve Arrow',\n\t\t20 => 'Red+White Cone',\n\t\t21 => 'Red Cone',\n\t\t22 => 'Striped Red Cone',\n\t\t23 => 'Striped Blue Cone',\n\t\t24 => 'Blue Cone',\n\t\t25 => 'Striped Green Cone',\n\t\t26 => 'Green Cone',\n\t\t27 => 'Orange Cone',\n\t\t28 => 'White Cone',\n\t\t29 => 'Striped Yellow Cone',\n\t\t30 => 'Yellow Cone',\n\t\t40 => 'Red Directional Cone',\n\t\t41 => 'Blue Directional Cone',\n\t\t42 => 'Green Directional Cone',\n\t\t43 => 'Yellow Directional Cone',\n\t\t48 => 'Single Tire',\n\t\t49 => 'Tire Stack of 2',\n\t\t50 => 'Tire Stack of 3',\n\t\t51 => 'Tire Stack of 4',\n\t\t52 => 'Big Single Tire',\n\t\t53 => 'Big Tire Stack of 2',\n\t\t54 => 'Big Tire Stack of 3',\n\t\t55 => 'Big Tire Stack of 4',\n\t\t64 => 'Left Curve Marker',\n\t\t65 => 'Right Curve Marker',\n\t\t66 => 'Left Turn Marker',\n\t\t67 => 'Right Turn Marker',\n\t\t68 => 'Hard Left Turn Marker',\n\t\t69 => 'Hard Right Turn Marker',\n\t\t70 => 'Left->Right Road Marker',\n\t\t71 => 'Right->Left Road Marker',\n\t\t72 => 'U-Turn->Right Turn Marker',\n\t\t73 => 'U-Turn->Left Turn Marker',\n\t\t74 => 'Left Winding Turn Marker',\n\t\t75 => 'Right Winding Turn Marker',\n\t\t76 => 'Left U-Turn Marker',\n\t\t77 => 'Right U-Turn Marker',\n\t\t84 => '25m Sign',\n\t\t85 => '50m Sign',\n\t\t86 => '75m Sign',\n\t\t87 => '100m Sign',\n\t\t88 => '125m Sign',\n\t\t89 => '150m Sign',\n\t\t90 => '200m Sign',\n\t\t91 => '250m Sign',\n\t\t96 => 'Short Railing',\n\t\t97 => 'Medium Railing', 98 => 'Long Railing',\n\t\t104 => 'Long Barrier',\n\t\t105 => 'Red Barrier', 106 => 'White Barrier',\n\t\t112 => 'Banner',\n\t\t113 => 'Banner',\n\t\t120 => 'Ramp',\n\t\t121 => 'Wide Ramp',\n\t\t128 => '10m Speed Bump',\n\t\t129 => '6m Speed Bump',\n\t\t136 => 'Green Post',\n\t\t137 => 'Orange Post',\n\t\t138 => 'Red Post',\n\t\t139 => 'White Post',\n\t\t144 => 'Hay Bale',\n\t\t148 => 'Railing',\n\t\t160 => 'Keep Left Sign',\n\t\t161 => 'Keep Right Sign',\n\t\t168 => '80 KM/H Sign',\n\t\t169 => '50 KM/H Sign'\n\t);\n}\n\n?>"]],"start1":0,"start2":0,"length1":0,"length2":20575}]],"length":20575}
{"contributors":[],"silentsave":true,"ts":1363202013016,"patch":[[{"diffs":[[-1,"﻿"],[0,"<?ph"]],"start1":0,"start2":0,"length1":5,"length2":4},{"diffs":[[0,"ne.\n */\n"],[1," \n"],[0,"class La"]],"start1":160,"start2":160,"length1":16,"length2":18}]],"length":20576,"saved":false}
{"ts":1363202014940,"patch":[[{"diffs":[[0,"ne.\n */\n"],[-1," "],[0,"\nclass L"]],"start1":160,"start2":160,"length1":17,"length2":16}]],"length":20575,"saved":false}
{"ts":1363202017797,"patch":[[{"diffs":[[0,"ne.\n */\n"],[1,"namespace "],[0,"\nclass L"]],"start1":160,"start2":160,"length1":16,"length2":26}]],"length":20585,"saved":false}
{"ts":1363202019442,"patch":[[{"diffs":[[0,"mespace "],[1,"PROSM"],[0,"\nclass L"]],"start1":170,"start2":170,"length1":16,"length2":21}]],"length":20590,"saved":false}
{"ts":1363202020819,"patch":[[{"diffs":[[0,"e PR"],[-1,"OSM"],[1,"IS"],[0,"\ncla"]],"start1":176,"start2":176,"length1":11,"length2":10}]],"length":20589,"saved":false}
{"ts":1363202022396,"patch":[[{"diffs":[[0,"ace PRIS"],[1,"M\\"],[0,"\nclass L"]],"start1":174,"start2":174,"length1":16,"length2":18}]],"length":20591,"saved":false}
{"ts":1363202024716,"patch":[[{"diffs":[[0,"e PRISM\\"],[1,"Module\\"],[0,"\nclass L"]],"start1":176,"start2":176,"length1":16,"length2":23}]],"length":20598,"saved":false}
{"ts":1363202026491,"patch":[[{"diffs":[[0,"\\Module\\"],[1,"LayoutO"],[0,"\nclass L"]],"start1":183,"start2":183,"length1":16,"length2":23}]],"length":20605,"saved":false}
{"ts":1363202029029,"patch":[[{"diffs":[[0,"\\LayoutO"],[1,"bject;\n"],[0,"\nclass L"]],"start1":190,"start2":190,"length1":16,"length2":23}]],"length":20612,"saved":false}
{"ts":1363202031907,"patch":[[{"diffs":[[0,"<?php\n"],[-1,"\n"],[0,"/**\n * P"]],"start1":0,"start2":0,"length1":15,"length2":14}]],"length":20611,"saved":false}
{"ts":1363202034132,"patch":[[{"diffs":[[0,"ne.\n */\n"],[1," \n"],[0,"namespac"]],"start1":159,"start2":159,"length1":16,"length2":18}]],"length":20613,"saved":false}
{"ts":1363202035325,"patch":[[{"diffs":[[0,"ne.\n */\n"],[-1," "],[0,"\nnamespa"]],"start1":159,"start2":159,"length1":17,"length2":16}]],"length":20612,"saved":false}
{"contributors":[],"silentsave":true,"ts":1363273952447,"patch":[[{"diffs":[[-1,"﻿"],[0,"<?php\n"],[-1,"\n"],[0,"/**\n"]],"start1":0,"start2":0,"length1":12,"length2":10},{"diffs":[[0,"ne.\n */\n"],[1,"\nnamespace PRISM\\Module;\n\n"],[0,"class La"]],"start1":159,"start2":159,"length1":16,"length2":42}]],"length":20599,"saved":false}
