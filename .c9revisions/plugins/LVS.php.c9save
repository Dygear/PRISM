{"ts":1363142453390,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\nclass LVS extends Plugins\n{\n\tconst URL = 'http://lfsforum.net/forumdisplay.php?f=312';\n\tconst NAME = 'LVS';\n\tconst AUTHOR = 'PRISM Dev Team';\n\tconst VERSION = PHPInSimMod::VERSION;\n\tconst DESCRIPTION = 'Lap Verification System.';\n\n\tconst PATH = '/data/pth/';\n\n\tprivate $pth = null;\n\tprivate $lapValidation = array();\n\tprivate $onLap = array();\n\tprivate $onRoad = array();\n\tprivate $Track = NULL;\n\n\tpublic function __construct()\n\t{\n\t\t$this->registerPacket('onTrackInfo', ISP_STA);\n\t\t$this->registerPacket('onLoadLayout', ISP_AXI);\n\t\t$this->registerPacket('onNewPlayer', ISP_NPL);\n\t\t$this->registerPacket('onPlayerLeave', ISP_PLL);\n\t\t$this->registerPacket('onNewLap', ISP_LAP);\n\t\t$this->registerPacket('onVerification', ISP_HLV);\n\t\t$this->registerPacket('onCarInfo', ISP_MCI);\n\n\t\t$this->registerSayCommand('check', 'cmdValid', '<PLID> (LAP) - Check\\'s to see if a lap is valid.');\n\t\t$this->registerSayCommand('plids', 'cmdListPLIDs', 'Gets a list of PLID\\'s and the UName and PName connected with that ID.');\n\t}\n\n\tpublic function onTrackInfo(IS_STA $STA)\n\t{\n\t\tif ($this->Track == $STA->Track)\n\t\t\treturn;\n\n\t\t$this->Track = $STA->Track; # Update Track Short Code\n\n\t\t$path = ROOTPATH . $this::PATH . $this->Track . '.pth';\n\n\t\tif (!file_exists($path))\n\t\t\treturn $this->pth = NULL; # We don't have a PTH file for this track.\n\n\t\t$this->pth = new pth($path);\n\n\t\tconsole(\"Loaded {$this->Track}.pth\");\n\n\t\treturn PLUGIN_CONTINUE;\n\t}\n\n\tpublic function onLoadLayout(IS_AXI $AXI)\n\t{\n\t\t$trackType = substr($this->Track, -1);\n\n\t\tif ($trackType == 'X' OR $trackType == 'Y')\n\t\t\treturn; # Not a open layout where we need to check for custom pth files.\n\n\t\t$path = ROOTPATH . $this::PATH . $AXI->LName . '.pth';\n\n\t\tif (!file_exists($path))\n\t\t\treturn $this->pth = NULL; # We don't have a PTH file for this track.\n\n\t\t$this->pth = new pth($path);\n\n\t\tconsole(\"Loaded {$this->Track}.pth\");\n\n\t\treturn PLUGIN_CONTINUE;\n\t}\n\n\tpublic function onNewPlayer(IS_NPL $NPL)\n\t{\n\t\t$this->onLap[$NPL->PLID] = 1;\n\t\t$this->lapValidation[$NPL->PLID] = array(1 => TRUE);\n\t}\n\n\tpublic function onPlayerLeave(IS_PLL $PLL)\n\t{\n\t\tunset($this->onLap[$PLL->PLID]);\n\t\tunset($this->lapValidation[$PLL->PLID]);\n\t}\n\t\n\tpublic function onNewLap(IS_LAP $LAP)\n\t{\n\t\t$this->onLap[$LAP->PLID] = $LAP->LapsDone;\n\t\t$this->lapValidation[$LAP->PLID][$this->onLap[$LAP->PLID]] = TRUE;\n\t}\n\n\tpublic function onVerification(IS_HLV $HLV)\n\t{\n\t\tif (!isset($this->lapValidation[$HLV->PLID]))\n\t\t\treturn PLUGIN_CONTINUE; # In the case where the player that caused the HLV has already also left.\n\n\t\tif ($this->lapValidation[$HLV->PLID][$this->onLap[$HLV->PLID]] === FALSE)\n\t\t\treturn PLUGIN_CONTINUE;\t# It's already an invalid lap, we don't report it twice.\n\n\t\t$cl = $this->getClientByPLID($HLV->PLID);\n\t\tMsg2Lfs()->Msg(\"{$cl->PName}'s Lap is ^1invalid^9!\")->Send();\n\t\t\n\t\t$this->lapValidation[$HLV->PLID][$this->onLap[$HLV->PLID]] = FALSE;\n\t}\n\t\n\tpublic function isValid($PLID, $LAP = NULL)\n\t{\n\t\tif ($LAP === NULL)\n\t\t\t$LAP = $this->onLap[$PLID];\n\n\t\treturn $this->lapValidation[$PLID][$LAP];\n\t}\n\t\n\tpublic function onCarInfo(IS_MCI $MCI)\n\t{\n\t\tif (!$this->pth) { return PLUGIN_CONTINUE; }\n\n\t\tforeach ($MCI->Info as $CompCar)\n\t\t{\n\t\t\tif (!isset($this->lapValidation[$CompCar->PLID]))\n\t\t\t\tcontinue; # In the case where the player has already left.\n\n\t\t\t$isRoad = $this->pth->isOnRoad($CompCar->X, $CompCar->Y, $CompCar->Node);\n\n\t\t\tif (!isset($this->onRoad[$CompCar->PLID]))\n\t\t\t\t$this->onRoad[$CompCar->PLID] = NULL;\n\n\t\t\tif ($this->onRoad[$CompCar->PLID] == $isRoad)\n\t\t\t\tcontinue; # They already know.\n\n\t\t\tif ($isRoad === FALSE)\n\t\t\t\tMsg2Lfs()->PLID($CompCar->PLID)->Text('You are ^1off^9 the track!')->Send();\n\t\t\telse\n\t\t\t\tMsg2Lfs()->PLID($CompCar->PLID)->Text('You are ^2on^9 the track!')->Send();\n\n\t\t\t$this->onRoad[$CompCar->PLID] = $isRoad;\n\n\t\t\tif ($isRoad === FALSE OR $this->lapValidation[$CompCar->PLID][$this->onLap[$CompCar->PLID]] === FALSE)\n\t\t\t\tcontinue;\t# It's already an invalid lap, we don't report it twice.\n\n\t\t\tMsg2Lfs()->Msg(\"{$this->getClientByPLID($CompCar->PLID)->PName}'s Lap is ^1invalid^9!\")->Send();\n\n\t\t\t$this->lapValidation[$CompCar->PLID][$this->onLap[$CompCar->PLID]] = FALSE;\n\t\t}\n\t}\n\t\n\tpublic function cmdValid($cmd, $ucid)\n\t{\n\t\t$argc = count($argv = str_getcsv($cmd, ' '));\n\n\t\t$plid = (isset($argv[1])) ? $argv[1] : $this->getClientByUCID($ucid)->PLID;\n\n\t\tif ($this->isValid($plid, $argv[2]))\n\t\t\tMsg2Lfs()->UCID($ucid)->Text('Lap is valid.')->Send();\n\t\telse\n\t\t\tMsg2Lfs()->UCID($ucid)->Text('Lap is not valid.')->Send();\n\n\t\treturn PLUGIN_HANDLED;\n\t}\n\t\n\tpublic function cmdListPLIDs($cmd, $ucid)\n\t{\n\t\tksort($this->onLap);\n\n\t\tforEach ($this->onLap as $PLID => $LAP)\n\t\t{\n\t\t\t$cl = $this->getClientByPLID($PLID);\n\t\t\tMsg2Lfs()->UCID($ucid)->Text(\"{$PLID} : {$cl->UCID} - {$cl->UName} - {$cl->PName}\")->Send();\n\t\t}\n\t}\n}\n?>\n"]],"start1":0,"start2":0,"length1":0,"length2":4759}]],"length":4759}
